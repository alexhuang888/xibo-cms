{#
/*
 * Spring Signage Ltd - http://www.springsignage.com
 * Copyright (C) 2015 Spring Signage Ltd
 * (${FILE_NAME})
 */
#}

{% extends "authed.twig" %}
{% import "inline.twig" as inline %}

{% block pageContent %}
    {# Get the display width / height #}
    {% set designerScale = min((resolution.designerWidth / layout.width), (resolution.designerHeight / layout.height)) %}

    {# Version 2 layout can support zooming? #}
    {% if layout.schemaVersion > 1 %}
        {% set designerScale = designerScale * zoom %}
    {% endif %}

    {# Reset the designer width / height based on the zoom #}
    {% set width = layout.width * designerScale %}
    {% set height = layout.height * designerScale %}

    {# Layout Background #}
    {% if layout.backgroundImageId == 0 %}
        {% set backgroundCss = layout.backgroundColor %}
    {% else %}
        {% set backgroundCss %}url('{{ urlFor("library.download", {id: layout.backgroundImageId}) }}?preview=1&width={{ width }}&height={{ height }}') top center no-repeat; background-color: {{ layout.backgroundColor }}{% endset %}
    {% endif %}

    <!-- top toolbar panel -->
    <div class="layout-toolbox row">
        <div class="col-md-12">
            <div class="panel bttm-fix with-nav-tabs panel-primary">
                <div class="panel-heading">
                    <ul class="nav nav-tabs">
                        <li class="active tab-design">
                            <a class="text-center" id="designer-tab" href="#tab1primary" data-toggle="tab"><i class="fa fa-pencil-square-o" aria-hidden="true"></i>  {% trans "Designer" %}</a>
                        </li>
                        <li class="tab-design">
                            <a class="text-center" id="action-tab" href="#tab2primary" data-toggle="tab"><i class="fa fa-bell" aria-hidden="true"></i>   {% trans "Action" %}s</a>
                        </li>
                        <div class="pull-right">
                            <span class="text-center" data-toggle="tooltip" data-placement="bottom" data-title="{% trans "Layout Duration: Duration may change depending on the exact number of items in ticker/twitter media items." %}">
                                <i class="fa fa-clock-o" aria-hidden="true"></i> {% trans "" %}
                                <span id="layout-duration" class="label label-success big-duration"></span></span>
                            <span>| <b>Currently Editing</b></span>
                            <select id="layoutJumpList" data-live-search="true">
                                {% for item in layouts %}
                                    <option value="{{ urlFor("layout.designer", {id: item.layoutId}) }}"{% if item.layoutId == layout.layoutId %} selected{% endif %}>{{ item.layout }}</option>
                                {% endfor %}
                            </select>
                        </div>
                    </ul>
                </div>
                <div class="panel-body">
                    <div class="tab-content">
                        <div class="tab-pane no-pad fade in active" id="tab1primary">
                            <div class="col-md-2 text-center">

                                <div class="btn-group btn-group-justified" role="group" aria-label="...">
                                    <div class="btn-group" role="group">
                                        <a class="XiboFormButton btn btn-default btn-sm" role="button" href="{{ urlFor("layout.edit.form", {id: layout.layoutId}) }}" title="{% trans "Edit the Layout Properties" %}"><span><i class="fa fa-picture-o" aria-hidden="true"></i> {% trans "" %}</span></a>
                                    </div>
                                    <div class="btn-group" role="group">
                                        <a class="btn btn-info btn-sm" id="regionAddButton" role="button" href="{{ urlFor("region.add", {id: layout.layoutId}) }}" title="{% trans "Add a new region" %}"><span><i class="fa fa-plus" aria-hidden="true"></i> {% trans "" %}</span></a>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-2 text-center">
                                {% if currentUser.routeViewable("/user") %}
                                <div class="designer-control-panel-checkbox override-layout">
                                    <input type="checkbox" class="switch-check-box" name="lockPosition"  data-size="small" data-off-color="danger" data-on-color="success" data-label-width="100" data-label-text="{% trans "Lock Positions" %}" {% if currentUser.getOptionValue("lockPosition", "false") == "true" %}checked="checked"{% endif %}
                                           data-on-text="{% trans "On" %}" data-off-text="{% trans "Off" %}"/>
                                </div>
                                {% endif %}
                            </div>
                            <div class="col-md-2 text-center">
                                {% if currentUser.routeViewable("/user") %}
                                <div class="designer-control-panel-checkbox override-layout">
                                    <input type="checkbox"  data-size="small" data-off-color="danger" data-on-color="success" class="switch-check-box" data-label-text="{% trans "Hide Controls" %}" data-label-width="100" name="hideControls" {% if currentUser.getOptionValue("hideControls", "false") == "true" %}checked="checked"{% endif %}
                                           data-on-text="{% trans "On" %}" data-off-text="{% trans "Off" %}"/>
                                </div>
                                {% endif %}
                            </div>
                            <div class="col-md-2 text-center">
                                <div class="btn-group btn-group-justified" role="group" aria-label="...">
                                    <div class="btn-group" role="group">

                                        <a id="layoutzoomout" class="btn btn-default btn-sm" data-toggle="" data-placement="bottom" title="{% trans "Decrease the canvas size" %}" role="button" xxxhref="{{ urlFor("layout.designer", {id: layout.layoutId}) }}?zoom={{ zoom - 0.3 }}" ><span><i class="fa fa-search-minus"  aria-hidden="true"></i>{% trans "" %}</span> </a>
                                    </div>
                                    <div class="btn-group" role="group">

                                        <a id="layoutzoomin" class="btn btn-default btn-sm" data-toggle="" data-placement="bottom" title="{% trans "Increase the canvas size" %}" role="button" xxxhref="{{ urlFor("layout.designer", {id: layout.layoutId}) }}?zoom={{ zoom + 0.3 }}"><span><i class="fa fa-search-plus" aria-hidden="true"></i> {% trans "" %}</span></a>
                                    </div>
                                    <div class="btn-group" role="group">
                                        <button id="saveDesignerSize" data-toggle="" data-placement="bottom" title="{% trans "Save canvas size as default" %}" class="btn btn-success btn-sm " role="button" data-designer-size="{{ zoom }}">
                                            <i class="fa fa-floppy-o" aria-hidden="true"></i></button>
                                    </div>
                                </div>
                            </div>
                            {% set alignposinfo = {'Align Top': 0, 'Align Bottom': 1, 'Align Left': 2, 'Align Right': 3, 'Align V-Center': 4, 'Align H-Center': 5, 'Same Width':11, 'Same Height': 12, 'Same Size': 13, "Canvas V Center": 21, "Canvas H Center": 22, "Canvas Center": 23, "Same Canvas Width" : 24, "Same Canvas Height": 25, "Same Canvas Size" : 26, "Vertical Distribution": 31, "Horizontal Distriution": 32} %}                            
                            <div class="col-md-2 text-center">
                                <div class="btn-group regionAligmentDropdown pull-right">
                                    <button class="btn dropdown-toggle" data-toggle="dropdown">
                                        <span class="regionAligmentDropdown-tip" title="{% trans "Align region position/size" %}">{% trans "Region alignment" %}</span> <span class="caret"></span>
                                    </button>
                                    <ul class="dropdown-menu">
                                    <li>
                                            <a href="javascript:void(0)" onclick="DeSelecteAllRegion()">{% trans "Select None" %}</a>
                                    </li>
                                    {% for key,value in alignposinfo %}
                                        <li>
                                            <a href="javascript:void(0)" onclick="AdjustSelectedRegionPosition({{value}})">{% trans key %}</a>
                                        </li>
                                    {% endfor %}
                                    </ul>
                                </div>   
                            </div>                         
                            <div class="col-md-2 text-center">
                                <div class="btn-group" role="group" aria-label="...">
                                <div class="btn-group" role="group">
                                    <button id="layout-revert" class="btn btn-warning btn-sm disabled btn-block"  title="{% trans "Undo position change" %}">
                                        <i class="fa fa-undo" aria-hidden="true"></i> {% trans "" %}</button>
                                </div>
                                <div class="btn-group" role="group">
                                    <button id="layout-save-all" class="btn btn-success btn-sm disabled btn-block"  title="{% trans "Save Positions" %}">
                                        <i class="fa fa-floppy-o" aria-hidden="true"></i> {% trans "Save Positions" %}
                                    </button>
                                </div>
                            </div>
                        </div>

                    </div>
                    <div class="tab-pane no-pad fade" id="tab2primary">
                        <div class="col-md-6">
                            <div class="btn-group btn-group-justified" role="group" aria-label="...">
                                <div class="btn-group" role="group">
                                    <a class="btn btn-success btn-sm" role="button" href="{{ urlFor("layout.preview", {id: layout.layoutId}) }}" target="_blank"><span><i class="fa fa-eye" aria-hidden="true"></i> {% trans "Preview Layout" %}</span></a>
                                </div>
                                <div class="btn-group" role="group">
                                    <a class="XiboFormButton btn btn-info btn-sm" id="schedule-btn" role="button" href="{{ urlFor("schedule.now.form", {id: layout.campaignId, from: "Campaign"}) }}"><span><i class="fa fa-clock-o" aria-hidden="true"></i> {% trans "Schedule Now" %}</span></a>
                                </div>
                                <div class="btn-group" role="group">
                                    <a class="XiboFormButton btn btn-warning btn-sm" role="button" href="{{ urlFor("template.from.layout.form", {id: layout.layoutId}) }}"><span><i class="fa fa-floppy-o" aria-hidden="true"></i> {% trans "Save Template" %}</span></a>
                                    {% if layout.schemaVersion < 2 %}
                                        <a class="XiboFormButton btn btn-warning" role="button" href="{{ urlFor("layout.upgrade.form", {id: layout.layoutId}) }}"><span><i class="fa fa-floppy-o" aria-hidden="true"></i> {% trans "Upgrade Layout" %}</span></a>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            {% if isTemplate %}
                                <div class="alert no-pad alert-info text-right">{% trans "Editing a Template will only affect future Layouts." %}</div>
                            {% else %}
                                <div id="layout-status" class="alert no-pad text-center" style="margin-bottom: 0px;"></div>
                            {% endif %}
                        </div>

                    </div>
                </div>
            </div>
        </div>
        </div>
    </div>
    <!-- layout start -->
    <div class="row">
        <!-- left media panel -->
        <div class="col-md-2" id="mediaselectorpanel">
        <!--
                <div id="mediaoptional">
                    <div style="">
                    
                        <select class="form-control" id="mediatypeselector">
                            <option value="one">One</option>
                            <option value="two">Two</option>
                            <option value="three">Three</option>
                            <option value="four">Four</option>
                            <option value="five">Five</option>
                        </select>
                        
                        <input class="form-control" id='mediatagfilter'></input>
                       
                    </div>
                    <div id="medialisttoolpanel">
                        <i id='addnewplaylisticon' class="fa fa-plus fa-fw playlistitemaddicon" title='{% trans "Add a new playlist" %}' style="width:10%;text-size:1em;"></i>
                    </div>
                </div>
            -->
                <!-- actually a playlist panel -->
                <div id="medialistpanel" title="{% trans "Playlist collections" %}">
                    <div class="medialistcarousel-wrapper">
                        <!--
                            <a href="#" class="medialistcarousel-control-first">&lsaquo;&lsaquo;</a>
                            -->
                            <a href="#" class="medialistcarousel-control-prev" title="{% trans "Scroll up one playlist" %}">&lsaquo;</a>
                            <i id='addnewplaylisticon' class="fa fa-plus fa-fw playlistitemaddicon" title="{% trans "Add a new playlist" %}" ></i>
                            <div class="medialistcarousel" id='medialistcarousel-droppable'>
                                <ul id="medialist-draggable">

                                </ul>
                            </div>
                            <!--
                            <a href="#" class="medialistcarousel-control-last">&rsaquo;&rsaquo;</a>
                            -->
                            <a href="#" class="medialistcarousel-control-next" title="{% trans "Scroll down one playlist" %}">&rsaquo;</a>
                            <p class="medialistcarousel-pagination" 
                            </p>                            
                    </div>
                </div>
        </div>
        <div class="col-md-10" id="layoutcontentpanel" style="height:{{resolution.designerHeight+200}}px;">                   
            <div class="row" id="layoutpanel" >
                <div id="layout" zoom="{{ zoom }}" 
                                tip_scale="1" designer_scale="{{ designerScale }}" 
                                class="layout center-block col-md-12 layoutitem regionsnappableitem" 
                                layoutid="{{ layout.layoutId }}" 
                                width="{{layout.width}}"
                                height = "{{layout.height}}" 
                                reswidth="{{resolution.designerWidth}}"
                                resheight = "{{resolution.designerHeight}}" 
                                data-background-color="{{ layout.backgroundColor }}" 
                                data-status-url="{{ urlFor("layout.status", {id: layout.layoutId}) }}" 
                                data-position-all-url="{{ urlFor("region.position.all", {id: layout.layoutId}) }}" 
                                style="position:relative; width:{{ width }}px; height:{{ height }}px; background:{{ backgroundCss }}; margin:0px;padding:0px;">

                    {% for region in layout.regions %}
                        {% set regionWidth = region.width * designerScale %}
                        {% set regionHeight = region.height * designerScale %}
                        {% set regionLeft = region.left * designerScale %}
                        {% set regionTop = region.top * designerScale %}

                        {# Disabled / Enabled CSS #}
                        {% if currentUser.checkEditable(region) %}
                            {% set disabledCss = "region" %}
                            {% set trasparencyCss = "" %}
                        {% else %}
                            {% set disabledCss = "regionDis" %}
                            {% set trasparencyCss = "regionDisabled" %}
                        {% endif %}

                        {% if currentUser.checkViewable(region) %}
                            {% set previewCss = "regionPreview" %}
                        {% else %}
                            {% set previewCss = "" %}
                        {% endif %}
                        <!-- region start -->
                        <div id="region_{{ region.regionId }}" 
                                regionEnabled="{{ currentUser.checkEditable(region) }}" 
                                regionid="{{ region.regionId }}" 
                                layoutid="{{ layout.layoutId }}" 
                                zindex="{{ region.regionId }}" 
                                tip_scale="1" 
                                designer_scale="{{ designerScale }}" 
                                left = "{{ region.left }}",
                                top = "{{ region.top }}",
                                width="{{ region.width }}" 
                                height="{{ region.height }}" 
                                duration={{ region.duration }}
                                href="{{ urlFor("region.timeline.form", {id: region.regionId}) }}" 
                                {% if currentUser.checkEditable(region) %}ondblclick="XiboFormRender($(this))"{% endif %} 
                                class="{{ disabledCss }} {{ previewCss }} regionitem mediadroppable regionsnappableitem" 
                                data-preview-url="{{ urlFor("region.preview", {id: region.regionId}) }}" 
                                data-reset-playlist-url="{{ urlFor("region.resetplaylist", {regionid: region.regionId}) }}"
                                style="position:absolute; width:{{ regionWidth }}px; height:{{ regionHeight }}px; top: {{ regionTop }}px; left:{{ regionLeft }}px; z-index: {{ region.zIndex }};margin:0px;padding:0px;">
                            <!-- region transparency background -->                            
                            <div class="regionTransparency {{ transparencyCss }}" style="width:100%; height:100%;"></div>
                            <!-- region dropdown menu items -->
                            {% if currentUser.checkEditable(region) %}
                                <!--<i class="fa fa-cog fa-fw regionitemsettingicon"></i>
                                <i class="fa fa-times fa-fw regionitemdeleteicon"></i>   -->
                                <i class="fa fa-check fa-fw regionitemselectedicon regionselectediconOff"></i>                          
                                <div class="btn-group regionInfo pull-right">
                                    <button class="btn dropdown-toggle" data-toggle="dropdown">
                                        <span class="region-tip">{{ region.width|round }} x {{ region.height|round }} ({{ region.left|round }} ,{{ region.top|round }})</span> <span class="caret"></span>
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li>
                                            <a class="XiboFormButton" href="{{ urlFor("region.timeline.form", {id: region.regionId}) }}">{% trans "Edit Timeline" %}</a>
                                        </li>
                                        <li>
                                            <a class="RegionOptionsMenuItem" href="{{ urlFor("region.edit.form", {id: region.regionId}) }}">{% trans "Options" %}</a>
                                        </li>
                                        <li>
                                            <a class="XiboFormButton" href="{{ urlFor("region.delete.form", {id: region.regionId}) }}">{% trans "Delete" %}</a>
                                        </li>
                                        <li>
                                            <a class="XiboFormButton" href="{{ urlFor("user.permissions.form", {entity: "Region", id: region.regionId}) }}">{% trans "Permissions" %}</a>
                                        </li>
                                    </ul>
                                </div>
                            {% elseif layout.schemaVersion >= 2 and currentUser.checkViewable(region) %}
                                <div class="regionInfo">
                                    <span class="region-tip">{{ region.width|round }} x {{ region.height|round }}
                                        ({{ region.left|round }}
                                        ,{{ region.top|round }})</span>
                                </div>
                            {% endif %}
                            <!-- region preview panel -->
                            <div class="preview">
                                <div class="previewContent">

                                </div>
                                <div class="previewNav label label-info"></div>
                            </div>
                        </div>
                        <!-- region end -->
                    {% endfor %}
                </div>
            </div>
            <!--
            <div class="row" id="playlistpanel" style="height: 20%;">
                <div class="playlistcarousel-wrapper">

                    <a href="#" class="playlistcarousel-control-prev">&lsaquo;</a>

                    <div class="playlistcarousel" id='playlistcarousel-droppable'>
                        <ul id="playlist-sortable-draggable">
                            <li class="playlistitem ui-state-default">A
                                <i class="fa fa-times fa-fw playlistitemdeleteicon"></i>
                                <i class="fa fa-cog fa-fw playlistitemsettingicon"></i>
                            </li>
                            <li class="playlistitem ui-state-default">B
                                <i class="fa fa-times fa-fw playlistitemdeleteicon"></i>
                                <i class="fa fa-cog fa-fw playlistitemsettingicon"></i>
                            </li>
                            <li class="playlistitem ui-state-default">C
                                <i class="fa fa-times fa-fw playlistitemdeleteicon"></i>
                                <i class="fa fa-cog fa-fw playlistitemsettingicon"></i>
                            </li>
                            <li class="playlistitem ui-state-default">D
                                <i class="fa fa-times fa-fw playlistitemdeleteicon"></i>
                                <i class="fa fa-cog fa-fw playlistitemsettingicon"></i>
                            </li>
                            <li class="playlistitem ui-state-default">E
                                <i class="fa fa-times fa-fw playlistitemdeleteicon"></i>
                                <i class="fa fa-cog fa-fw playlistitemsettingicon"></i>
                            </li>
                            <li class="playlistitem ui-state-default">F
                                <i class="fa fa-times fa-fw playlistitemdeleteicon"></i>
                                <i class="fa fa-cog fa-fw playlistitemsettingicon"></i>
                            </li>
                            <li class="playlistitem ui-state-default">G
                                <i class="fa fa-times fa-fw playlistitemdeleteicon"></i>
                                <i class="fa fa-cog fa-fw playlistitemsettingicon"></i>
                            </li>
                            <li class="playlistitem ui-state-default">H
                                <i class="fa fa-times fa-fw playlistitemdeleteicon"></i>
                                <i class="fa fa-cog fa-fw playlistitemsettingicon"></i>
                            </li>
                            <li class="playlistitem ui-state-default">I
                                <i class="fa fa-times fa-fw playlistitemdeleteicon"></i>
                                <i class="fa fa-cog fa-fw playlistitemsettingicon"></i>
                            </li>
                            <li class="playlistitem ui-state-default">J
                                <i class="fa fa-times fa-fw playlistitemdeleteicon"></i>
                                <i class="fa fa-cog fa-fw playlistitemsettingicon"></i>
                            </li>
                            <li class="playlistitem ui-state-default">K
                                <i class="fa fa-times fa-fw playlistitemdeleteicon"></i>
                                <i class="fa fa-cog fa-fw playlistitemsettingicon"></i>
                            </li>
                            <li class="playlistitem ui-state-default">L
                                <i class="fa fa-times fa-fw playlistitemdeleteicon"></i>
                                <i class="fa fa-cog fa-fw playlistitemsettingicon"></i>
                            </li>
                        </ul>

                    </div>
                    
                    <a href="#" class="playlistcarousel-control-next">&rsaquo;</a>
                    <p class="playlistcarousel-pagination">
                    </p>
                </div>           
            <div>   
            --> 
        </div>

    </div>
    {% if layout.schemaVersion < 2 %}
        <div class="row">
            <div class="col-sm-12">
                <p class="alert alert-danger">{% trans "This is an old format layout, please consider upgrading using the options menu" %}</p>
            </div>
        </div>
    {% endif %}
    {% if designerScale < 0.41 %}
        <div class="row">
            <div class="col-sm-12">
                <p class="alert alert-danger">{% trans "This Layout is very large, so we have disabled region drag and drop. You could enlarge the designer from the options menu or use Region Options to Manually Position your regions." %}</p>
            </div>
        </div>
    {% endif %}
{% endblock %}

    {% block javaScript %}
        <script src="{{ theme.uri("libraries/jquery-jcarousel/jquery.jcarousel.js") }}"></script>
        <script src="{{ theme.uri("js/xibo-layout-designer.js") }}"></script>
        <script src="{{ theme.uri("js/thumblist-designer.js") }}"></script>
        <script type="text/javascript">
            var translation = {
                savePositionsFirst: "{% trans "Please save the pending position changes first by clicking Save Positions or cancel by clicking Undo." %}"
            };

            // Callback for the media form
            function mediaFormCallBack() {
                // prevent filter form submit
                $("#libraryAssignFilterOptions").find("form").on("submit", function(e) {
                    e.preventDefault();
                    return false;
                });

                var mediaTable = $("#mediaAssignments").DataTable({
                    "language": dataTablesLanguage,
                    serverSide: true, stateSave: true,
                    searchDelay: 3000,
                    "order": [[1, "asc"]],
                    "filter": false,
                    ajax: {
                        url: "{{ urlFor("library.search") }}",
                        "data": function (d) {
                            $.extend(d, $("#libraryAssignFilterOptions").find("form").serializeObject());
                        }
                    },
                    "columns": [
                        {"data": "mediaId"},
                        {"data": "name"},
                        {"data": "mediaType"},
                        {
                            "sortable": false,
                            "data": function (data, type, row, meta) {
                                if (type != "display")
                                    return "";

                                // Create a click-able span
                                return "<a href=\"#\" class=\"assignItem\"><span class=\"glyphicon glyphicon-plus-sign\"></a>";
                            }
                        }
                    ]
                });

                mediaTable.on('draw', function (e, settings) {
                    dataTableDraw(e, settings);

                    // Clicky on the +spans
                    $(".assignItem", "#mediaAssignments").click(function () {
                        // Get the row that this is in.
                        var data = mediaTable.row($(this).closest("tr")).data();

                        // Construct a new list item for the lower list and append it.
                        var newItem = $("<li/>", {
                            "text": " " + data.name,
                            "data-media-id": data.mediaId,
                            "class": "li-sortable",
                            "dblclick": function () {
                                $(this).remove();
                            }
                        });

                        newItem.appendTo("#LibraryAssignSortable");

                        // Add a span to that new item
                        $("<span/>", {
                            "class": "glyphicon glyphicon-minus-sign",
                            click: function () {
                                $(this).parent().remove();
                            }
                        }).prependTo(newItem);
                    });
                });
                mediaTable.on('processing.dt', dataTableProcessing);

                // Make our little list sortable
                $("#LibraryAssignSortable").sortable();

                // Bind the filter form
                $("#libraryAssignFilterOptions").find("input, select").change(function () {
                    mediaTable.ajax.reload();
                });
            }

            /**
             * Open Upload Form
             */
            function openUploadForm(templateOptions, buttons) {

                // Close the current dialog
                XiboDialogClose();

                var template = Handlebars.compile($("#template-file-upload").html());

                // Handle bars and open a dialog
                bootbox.dialog({
                    message: template(templateOptions),
                    title: "{% trans "Upload media" %}",
                    buttons: buttons,
                    updateInAllChecked: {% if settings.LIBRARY_MEDIA_UPDATEINALL_CHECKB == "Checked" %}true{% else %}false{% endif %},
                    deleteOldRevisionsChecked: {% if settings.LIBRARY_MEDIA_DELETEOLDVER_CHECKB == "Checked" %}true{% else %}false{% endif %}
                }).on('shown.bs.modal', function () {
                    // Configure the upload form
                    var url = "{{ urlFor("library.add") }}";
                    var form = $(this).find("form");

                    // Initialize the jQuery File Upload widget:
                    form.fileupload({
                        url: url,
                        disableImageResize: false
                    });

                    // Upload server status check for browsers with CORS support:
                    if ($.support.cors) {
                        $.ajax({
                            url: url,
                            type: 'HEAD'
                        }).fail(function () {
                            $('<span class="alert alert-error"/>')
                                    .text('Upload server currently unavailable - ' + new Date())
                                    .appendTo(form);
                        });
                    }

                    // Enable iframe cross-domain access via redirect option:
                    form.fileupload(
                            'option',
                            'redirect',
                            window.location.href.replace(
                                    /\/[^\/]*$/,
                                    '/cors/result.html?%s'
                            )
                    );

                    form.bind('fileuploadsubmit', function (e, data) {
                        var inputs = data.context.find(':input');
                        if (inputs.filter('[required][value=""]').first().focus().length) {
                            return false;
                        }
                        data.formData = inputs.serializeArray().concat(form.serializeArray());

                        inputs.filter("input").prop("disabled", true);
                    });
                });
            }

            // Click Handler for Library Upload Buttons (image, video, powerpoint, flash)
            function libraryUploadClick(e) {
                e.preventDefault();

                var validExt = $(this).data().validExt.replace(/,/g, "|");
                var playlistId = $(this).data().playlistId;

                openUploadForm({
                    trans: {
                        addFiles: "{% trans "Add files" %}",
                        startUpload: "{% trans "Start upload" %}",
                        cancelUpload: "{% trans "Cancel upload" %}"
                    },
                    upload: {
                        maxSize: {{ libraryUpload.maxSize }},
                        maxSizeMessage: "{{ libraryUpload.maxSizeMessage }}",
                        validExt: validExt
                    },
                    playlistId: playlistId
                }, {
                    library: {
                        label: "{% trans "View Library" %}",
                        callback: function () {
                            XiboFormRender("{{ urlFor("playlist.library.assign.form") }}".replace(":id", playlistId.toString()));
                        }
                    },
                    main: {
                        label: "{% trans "Done" %}",
                        className: "btn-primary",
                        callback: function () {
                            XiboFormRender(timelineForm.url, timelineForm.value);
                        }
                    }
                });
            }

            /**
             * Media Edit form
             */
            function mediaEditFormOpen(dialog) {

                if (dialog.find("form").data().mediaEditable != 1)
                    return;

                // Create a new button
                var footer = dialog.find(".modal-footer");
                var mediaId = dialog.find("form").data().mediaId;
                var widgetId = dialog.find("form").data().widgetId;
                var validExtensions = dialog.find("form").data().validExtensions;

                // Append
                var replaceButton = $('<button class="btn btn-warning">').html("{% trans "Replace" %}");
                replaceButton.click(function (e) {
                    e.preventDefault();

                    // Open the upload dialog with our options.
                    openUploadForm({
                        oldMediaId: mediaId,
                        widgetId: widgetId,
                        {% if config.LIBRARY_MEDIA_UPDATEINALL_CHECKB == "Checked" %}
                        updateInAllChecked: true,
                        {% else %}
                        updateInAllChecked: false,
                        {% endif %}
                        trans: {
                            addFiles: "{% trans "Add Replacement" %}",
                            startUpload: "{% trans "Start Replace" %}",
                            cancelUpload: "{% trans "Cancel Replace" %}",
                            updateInLayouts: {
                                title: "{% trans "Update this media in all layouts it is assigned to?" %}",
                                helpText: "{% trans "Note: It will only be updated in layouts you have permission to edit." %}"
                            },
                            deleteOldRevisions: {
                                title: "{% trans "Delete the old version?" %}",
                                helpText: "{% trans "Completely remove the old version of this media item if a new file is being uploaded." %}"
                            }
                        },
                        upload: {
                            maxSize: {{ libraryUpload.maxSize }},
                            maxSizeMessage: "{{ libraryUpload.maxSizeMessage }}",
                            validExt: validExtensions
                        }
                    }, {
                        main: {
                            label: "{% trans "Done" %}",
                            className: "btn-primary",
                            callback: function () {
                                XiboFormRender(timelineForm.url, timelineForm.value);
                            }
                        }
                    });
                });

                footer.find(".btn-primary").before(replaceButton);
            }

            function timelineGridCallback(dialog) {

                dialog.addClass("modal-big");

                var timelineWidgetTabel = $("#timelineWidgets").DataTable({
                    "language": dataTablesLanguage,
                    serverSide: true, stateSave: true,
                    filter: false,
                    'ordering': false,
                    searchDelay: 3000,
                    //"order": [[0, "asc"]],
                    //rowReorder: true,
                    "createdRow": function( row, data, dataIndex ) {
                        //console.log($(row));
                        //console.log(data);
                        $(row).attr('widgetid', data['widgetId']);
                        $(row).attr('displayorder', data['displayOrder']);
                    },         
                    ajax: {
                        url: "{{ urlFor("playlist.widget.search") }}",
                        "data": function (d) {
                            $.extend(d, $("#timelineWidgets").closest(".XiboGrid").find(".FilterDiv form").serializeObject());
                        }
                    },
                    "columns": [
                        {"data": "displayOrder", "orderable": false},
                        {"data": "name", "orderable": false},
                        {"data": "type", "orderable": false},
                        {"data": "duration", "orderable": false},
                        {"data": "transition", "orderable": false},
                        {"data": "widgetId", "visible": false, "orderable": false},
                        {
                            "orderable": false,
                            "data": dataTableButtonsColumn
                        }
                    ]
                });
                $("#timelineWidgets tbody").sortable();
                timelineWidgetTabel.on('draw', dataTableDraw);
                timelineWidgetTabel.on('processing.dt', dataTableProcessing);
                // Hook up the library Upload Buttons
                $(".libraryUploadForm").click(libraryUploadClick);
            }

            function DeleteRegion(form, regionId) {
                $.ajax({
                    type: form.attr("method"),
                    url: form.attr("action"),
                    cache: false,
                    dataType: "json",
                    data: form.serialize(),
                    success: function (xhr, textStatus, error) {

                        XiboSubmitResponse(xhr, form);

                        if (xhr.success)
                            $("#region_" + regionId).remove();
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        SystemMessage(xhr.responseText, false);
                    }
                });
            }
            refreshplaylistCallback = function() {
                $.ajax({
                    type: "get",
                    url: "{{ urlFor("playlist.search") }}",
                    cache: false,
                    dataType: "json"                        
                })
                .success(function(data) 
                {                 
                    if (data.data.length > 0)
                    {
                        $("#medialist-draggable").html("");
                        for (var m = 0; m < data.data.length; m++)
                        {
                            var playlist = data.data[m];
                            var alink = playlist.thumbnail;
                            //var alinkdom = $.parseHTML(alink);
                            //console.log($(alinkdom));
                            //console.log(playlist);
                            var alttip = playlist.name + "/" + playlist.numberWidgets + "items";
                            var html = '<li class="mediaitem mediaitemtooltip ui-state-default"';
                            html = html + ' title="' + alttip + '"';
                            html = html + ' id="m-' + playlist.playlistId + '"';
                            //html = html + ' data-mediatype="' + media.mediaType + '"';
                            html = html + ' data-playlistid="' + playlist.playlistId + '"';
                            //html = html + ' data-mediafilesize="' + media.fileSize + '"';
                            html = html + ' >';
                            html = html + '<img style="vertical-align: initial;" width="92" height="68" src="' + playlist.thumbnail + '" alt="' + alttip + '" />';
                            html = html + '<i class="fa fa-cog fa-fw medialistitemsettingicon medialistitemsettingiconOff"';
                            html = html + ' data-playlistid=' + playlist.playlistId;
                            var pltimelineformurl = "{{ urlFor('playlist.timeline.form')}}";
                            pltimelineformurl = pltimelineformurl.replace(":id", playlist.playlistId);

                            html = html + ' data-playlisteditformurl="' + pltimelineformurl + '?view=grid"'
                            html = html + ' title="{% trans "Edit this playlist" %}"';
                            html = html + ' ></i>';
                            html = html + ' </li>';
                            $("#medialist-draggable").append(html);
                            //$(html).appendto("#medialist-draggable");                          
                        }
                        //$("#medialist-draggable").html($("#medialist-draggable").html());

                        $('.medialistcarousel').jcarousel('reload');
                        configureMedialistHandler();                        
                    }
                });
            };
            // this will be called from layout-designer-page
            function playlistAddFormOpen() {
                $("#playlistAddForm").submit(function(e) {
                    e.preventDefault();
                    var form = $(this);

                    //var url = $(this).data().redirect;
                    var urlFormRedirect = $(this).data().formRedirect;
                    $.ajax({
                        type: $(this).attr("method"),
                        url: $(this).attr("action"),
                        data: $(this).serialize(),
                        cache: false,
                        dataType:"json",
                        success: function(xhr, textStatus, error) {

                            XiboSubmitResponse(xhr, form);

                            if (xhr.success && urlFormRedirect != null) 
                            {
                                // Reload the designer
                                XiboFormRender(urlFormRedirect.replace(":id", xhr.id.toString()));
                            }
                        }
                    });
                });
            }
            // Bind to the add button when we load
            $(document).ready(function () {

                // Add region button
                $("#regionAddButton").click(function (e) {
                    e.preventDefault();
                    $.ajax({
                        type: "post",
                        url: $(this).attr("href"),
                        cache: false,
                        dataType: "json",
                        success: function (xhr, textStatus, error) 
                        {

                            XiboSubmitResponse(xhr);

                            if (xhr.success) 
                            {
                                console.log("added new region: " + xhr.id);
                                var regionIDElement = '.region_' + xhr.id;
                                var playlistid = xhr.data.playlists[0].playlistId;
                                console.log("playlistid=" + playlistid);
                                // Reload the designer
                                //window.location.reload();
                                // we have to creae a new region 
                                newHtml = addNewRegionWithRegionId(xhr.id, 
                                                                    playlistid,
                                                                    xhr.data.left,
                                                                    xhr.data.top,
                                                                    xhr.data.width,
                                                                    xhr.data.height,
                                                                    $('#layout').attr('designer_scale'),
                                                                    xhr.data.zIndex,
                                                                    xhr.extra['currentUserEditable']);
                                //console.log(newHtml);
                                var regionItem = $(newHtml).appendTo('#layout');

                                configureRegionHandler();

                                new Preview($(regionItem));                
                            }
                        }
                    })
                    .done(function(data)
                    {
                        if (data)
                        {
                            // data.id::regionid
                            // data.data: region
                            // create a new region
                        }
                    });
                });
                refreshplaylistCallback();
                $('#addnewplaylisticon').off('click');
                $('#addnewplaylisticon').on('click', function()
                {
                    // here, we should add a new playlist to this 
                    XiboFormRender('{{ urlFor("playlist.add.form") }}');
                });

            });
            /* end of document.ready() */

            addNewRegionWithRegionId = function(regionId, playlistid, originalLeft, originalTop,
                                                originalWidth, originalHeight, designerScale, regionZIndex,
                                                currentUsercheckEditable)
            {
                console.log(regionId + ' ' + originalLeft + ' ' + originalTop + ' ' + originalWidth + ' ' + originalHeight + ' ' + designerScale + ' ' + regionZIndex + ' ' + currentUsercheckEditable);
                var newRegionHtml = "";
                var currentUsercheckEditable = currentUsercheckEditable == 1 ? true : false;
                console.log(currentUsercheckEditable);
                var layoutid = "{{ layout.layoutId }}";
                var layoutschemaVersion = {{ layout.schemaVersion}};
                var urltimelineform = "{{ urlFor("region.timeline.form") }}";
                urltimelineform = urltimelineform.replace(":id", regionId.toString());
                var urlPreview = "{{ urlFor("region.preview") }}";
                urlPreview = urlPreview.replace(":id", regionId.toString());
                var urlResetPlaylist = "{{ urlFor("region.resetplaylist") }}";
                urlResetPlaylist = urlResetPlaylist.replace(":regionid", regionId.toString()); 
                urlResetPlaylist = urlResetPlaylist.replace(":playlistid", playlistid.toString());                
               
                var regionWidth = originalWidth * designerScale;
                var regionHeight = originalHeight * designerScale;
                var regionLeft = originalLeft * designerScale;
                var regionTop = originalTop * designerScale;

                var urlRegionDeleteForm = "{{ urlFor("region.delete.form") }}";
                urlRegionDeleteForm = urlRegionDeleteForm.replace(":id", regionId.toString());
                var urlRegionEditForm = "{{ urlFor("region.edit.form") }}";
                urlRegionEditForm = urlRegionEditForm.replace(":id", regionId.toString());
                var urlRegionTimeLineForm = "{{ urlFor("region.timeline.form") }}";
                urlRegionTimeLineForm = urlRegionTimeLineForm.replace(":id", regionId.toString());
                var urlUserPermissionForm = "{{ urlFor("user.permissions.form", {entity: "Region"}) }}";
                urlUserPermissionForm = urlUserPermissionForm.replace(":id", regionId.toString());                                                
                var disabledCss = 'regionDis';
                var transparencyCss = 'Disabled';
                var previewCss = "regionPreview";                
                if (currentUsercheckEditable)
                {
                    disabledCss = 'region';
                    transparencyCss = '';
                    previewCss = "regionPreview";
                }

                //<!-- region start -->
                newRegionHtml = newRegionHtml + '<div id="region_' + regionId + '"'; 
                newRegionHtml = newRegionHtml + ' regionEnabled="' + currentUsercheckEditable + '"';
                newRegionHtml = newRegionHtml + ' regionid="' + regionId + '"'; 
                newRegionHtml = newRegionHtml + ' layoutid="' + layoutid + '"';
                newRegionHtml = newRegionHtml + ' zindex="' + regionId + '"';
                newRegionHtml = newRegionHtml + ' tip_scale="1"';
                newRegionHtml = newRegionHtml + ' designer_scale="' + designerScale + '"'; 
                newRegionHtml = newRegionHtml + ' left = "' + originalLeft + '"';
                newRegionHtml = newRegionHtml + ' top = "' + originalTop + '"';
                newRegionHtml = newRegionHtml + ' width="' + originalWidth + '"'; 
                newRegionHtml = newRegionHtml + ' height="' + originalHeight + '"'; 
                newRegionHtml = newRegionHtml + ' duration=0';
                newRegionHtml = newRegionHtml + ' href="' + urltimelineform + '"'; 
                if (currentUsercheckEditable)
                {
                    newRegionHtml = newRegionHtml + ' ondblclick="XiboFormRender($(this))"';
                } 
                newRegionHtml = newRegionHtml + ' class="' + disabledCss + ' ' + previewCss + ' regionitem mediadroppable regionsnappableitem"'; 
                newRegionHtml = newRegionHtml + ' data-preview-url="' + urlPreview + '"';
                newRegionHtml = newRegionHtml + ' data-reset-playlist-url="' + urlResetPlaylist + '"';
                newRegionHtml = newRegionHtml + ' style="position:absolute; width:' + regionWidth + 'px; height:' + regionHeight + 'px; top:' + regionTop + 'px; left:' + regionLeft + 'px; z-index:' + regionZIndex + ';margin:0px;padding:0px;">';
                newRegionHtml = newRegionHtml + ' <i class="fa fa-check fa-fw regionitemselectedicon regionselectediconOff"></i>';
                    //<!-- region transparency background -->                            
                newRegionHtml = newRegionHtml + ' <div class="regionTransparency ' + transparencyCss + ' " style="width:100%; height:100%;"></div>';
                if (currentUsercheckEditable)
                { 
                    newRegionHtml = newRegionHtml + ' <div class="btn-group regionInfo pull-right">';
                    newRegionHtml = newRegionHtml + ' <button class="btn dropdown-toggle" data-toggle="dropdown">';
                    newRegionHtml = newRegionHtml + ' <span class="region-tip">' + originalWidth + ' x ' + originalHeight + ' (' + originalLeft + ' ,' + originalTop + ')</span> <span class="caret"></span>';
                    newRegionHtml = newRegionHtml + ' </button>';
                    newRegionHtml = newRegionHtml + ' <ul class="dropdown-menu">';
                    newRegionHtml = newRegionHtml + ' <li>';
                    newRegionHtml = newRegionHtml + ' <a class="XiboFormButton" href="' + urlRegionTimeLineForm + '">{% trans "Edit Timeline" %}</a>';
                    newRegionHtml = newRegionHtml + ' </li>';
                    newRegionHtml = newRegionHtml + ' <li>';
                    newRegionHtml = newRegionHtml + ' <a class="RegionOptionsMenuItem" href="' + urlRegionEditForm + '">{% trans "Options" %}</a>';
                    newRegionHtml = newRegionHtml + ' </li>';
                    newRegionHtml = newRegionHtml + ' <li>';
                    newRegionHtml = newRegionHtml + ' <a class="XiboFormButton" href="' + urlRegionDeleteForm + '">{% trans "Delete" %}</a>';
                    newRegionHtml = newRegionHtml + ' </li>';
                    newRegionHtml = newRegionHtml + ' <li>';
                    newRegionHtml = newRegionHtml + ' <a class="XiboFormButton" href="' + urlUserPermissionForm + '">{% trans "Permissions" %}</a>';
                    newRegionHtml = newRegionHtml + ' </li>';
                    newRegionHtml = newRegionHtml + ' </ul>';
                    newRegionHtml = newRegionHtml + ' </div>';
                }
                else if (currentUsercheckEditable && (layoutschemaVersion >= 2) )
                {
                    newRegionHtml = newRegionHtml + ' <div class="regionInfo">';
                    newRegionHtml = newRegionHtml + ' <span class="region-tip">' + originalWidth + ' x ' + originalHeight + ' (' + originalLeft + ' ,' + originalTop + ')</span> <span class="caret"></span>';
                    newRegionHtml = newRegionHtml + ' </div>';                            
                }
                //<!-- region preview panel -->
                newRegionHtml = newRegionHtml + ' <div class="preview">';
                newRegionHtml = newRegionHtml + ' <div class="previewContent">';

                newRegionHtml = newRegionHtml + ' </div>';
                newRegionHtml = newRegionHtml + ' <div class="previewNav label label-info"></div>';
                newRegionHtml = newRegionHtml + ' </div>';
                newRegionHtml = newRegionHtml + ' </div>';
                return newRegionHtml;
            };
            $("[name='my-checkbox']").bootstrapSwitch();
        </script>

        {% for module in modules %}
            {% if module.layoutDesignerJavaScript() != "" %}
                {% include module.layoutDesignerJavaScript() ~ ".twig" %}
            {% endif %}
        {% endfor %}

    {% endblock %}
