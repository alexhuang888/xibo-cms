{#
/*
 * Spring Signage Ltd - http://www.springsignage.com
 * Copyright (C) 2015 Spring Signage Ltd
 * (${FILE_NAME})
 */
#}

{% extends "authed.twig" %}
{% import "inline.twig" as inline %}

{% block pageContent %}
    {# Get the display width / height #}
    {% set designerScale = min((resolution.designerWidth / layout.width), (resolution.designerHeight / layout.height)) %}

    {# Version 2 layout can support zooming? #}
    {% if layout.schemaVersion > 1 %}
        {% set designerScale = designerScale * zoom %}
    {% endif %}

    {# Reset the designer width / height based on the zoom #}
    {% set width = layout.width * designerScale %}
    {% set height = layout.height * designerScale %}

    {# Layout Background #}
    {% if layout.backgroundImageId == 0 %}
        {% set backgroundCss = layout.backgroundColor %}
    {% else %}
        {% set backgroundCss %}url('{{ urlFor("library.download", {id: layout.backgroundImageId}) }}?preview=1&width={{ width }}&height={{ height }}') top center no-repeat; background-color: {{ layout.backgroundColor }}{% endset %}
    {% endif %}

    <!-- top toolbar panel -->
    <div class="layout-toolbox row">
        <div class="col-md-12">
            <div class="panel bttm-fix with-nav-tabs panel-primary">
                <div class="panel-heading">
                    <ul class="nav nav-tabs">
                        <li class="active tab-design">
                            <a class="text-center" id="designer-tab" href="#tab1primary" data-toggle="tab"><i class="fa fa-pencil-square-o" aria-hidden="true"></i>  {% trans "Designer" %}</a>
                        </li>
                        <li class="tab-design">
                            <a class="text-center" id="action-tab" href="#tab2primary" data-toggle="tab"><i class="fa fa-bell" aria-hidden="true"></i>   {% trans "Action" %}s</a>
                        </li>
                        <div class="pull-right">
                            <span class="text-center" data-toggle="tooltip" data-placement="bottom" data-title="{% trans "Layout Duration: Duration may change depending on the exact number of items in ticker/twitter media items." %}">
                                <i class="fa fa-clock-o" aria-hidden="true"></i> {% trans "" %}
                                <span id="layout-duration" class="label label-success big-duration"></span></span>
                            <span>| <b>Currently Editing</b></span>
                            <select id="layoutJumpList" data-live-search="true">
                                {% for item in layouts %}
                                    <option value="{{ urlFor("layout.designer", {id: item.layoutId}) }}"{% if item.layoutId == layout.layoutId %} selected{% endif %}>{{ item.layout }}</option>
                                {% endfor %}
                            </select>
                        </div>
                    </ul>
                </div>
                <div class="panel-body">
                    <div class="tab-content">
                        <div class="tab-pane no-pad fade in active" id="tab1primary">
                            <div class="col-md-2 text-center">

                                <div class="btn-group btn-group-justified" role="group" aria-label="...">
                                    <div class="btn-group" role="group">
                                        <a class="XiboFormButton btn btn-default btn-sm" role="button" href="{{ urlFor("layout.edit.form", {id: layout.layoutId}) }}" title="{% trans "Edit the Layout Properties" %}"><span><i class="fa fa-picture-o" aria-hidden="true"></i> {% trans "" %}</span></a>
                                    </div>
                                    <div class="btn-group" role="group">
                                        <a class="btn btn-info btn-sm" id="regionAddButton" role="button" href="{{ urlFor("region.add", {id: layout.layoutId}) }}" title="{% trans "Add a new region" %}"><span><i class="fa fa-plus" aria-hidden="true"></i> {% trans "" %}</span></a>
									</div>
									<div class="btn-group" role="group">

										<a class="btn btn-info btn-sm" id="regionDeleteButton" role="button" href="{{ urlFor("region.delete.form", {}) }}" title="{% trans "Delete region" %}"><span><i class="fa fa-minus" aria-hidden="true"></i> {% trans "" %}</span></a>
										<!--
										<a class="btn btn-info btn-sm" id="regionOptionsButton" role="button" href="{{ urlFor("region.edit.form", {}) }}" title="{% trans "Edit region" %}"><span><i class="fa fa-plus" aria-hidden="true"></i> {% trans "" %}</span></a>
										<a class="btn btn-info btn-sm" id="regionPermissionButton" role="button" href="{{ urlFor("user.permissions.form", { entity: "Region" }) }}" title="{% trans "Edit region permission" %}"><span><i class="fa fa-plus" aria-hidden="true"></i> {% trans "" %}</span></a>
										<a class="btn btn-info btn-sm" id="regionTimelineFormButton" role="button" href="{{ urlFor("region.timeline.form", {}) }}" title="{% trans "Edit region timeline" %}"><span><i class="fa fa-plus" aria-hidden="true"></i> {% trans "" %}</span></a>
-->

                                    </div>
                                </div>
                            </div>

                            <div class="col-md-2 text-center">
                                {% if currentUser.routeViewable("/user") %}
                                <div class="designer-control-panel-checkbox override-layout">
                                    <input type="checkbox" class="switch-check-box" name="lockPosition"  data-size="small" data-off-color="danger" data-on-color="success" data-label-width="100" data-label-text="{% trans "Lock Positions" %}" {% if currentUser.getOptionValue("lockPosition", "false") == "true" %}checked="checked"{% endif %}
                                           data-on-text="{% trans "On" %}" data-off-text="{% trans "Off" %}"/>
                                </div>
                                {% endif %}
                            </div>
                            <div class="col-md-2 text-center">
                                {% if currentUser.routeViewable("/user") %}
                                <div class="designer-control-panel-checkbox override-layout">
                                    <input type="checkbox"  data-size="small" data-off-color="danger" data-on-color="success" class="switch-check-box" data-label-text="{% trans "Hide Controls" %}" data-label-width="100" name="hideControls" {% if currentUser.getOptionValue("hideControls", "false") == "true" %}checked="checked"{% endif %}
                                           data-on-text="{% trans "On" %}" data-off-text="{% trans "Off" %}"/>
                                </div>
                                {% endif %}
                            </div>
                            <div class="col-md-2 text-center">
                                <div class="btn-group btn-group-justified" role="group" aria-label="...">
                                    <div class="btn-group" role="group">

                                        <a id="layoutzoomout" class="btn btn-default btn-sm" data-toggle="" data-placement="bottom" title="{% trans "Decrease the canvas size" %}" role="button" xxxhref="{{ urlFor("layout.designer", {id: layout.layoutId}) }}?zoom={{ zoom - 0.3 }}" ><span><i class="fa fa-search-minus"  aria-hidden="true"></i>{% trans "" %}</span> </a>
                                    </div>
                                    <div class="btn-group" role="group">

                                        <a id="layoutzoomin" class="btn btn-default btn-sm" data-toggle="" data-placement="bottom" title="{% trans "Increase the canvas size" %}" role="button" xxxhref="{{ urlFor("layout.designer", {id: layout.layoutId}) }}?zoom={{ zoom + 0.3 }}"><span><i class="fa fa-search-plus" aria-hidden="true"></i> {% trans "" %}</span></a>
                                    </div>
                                    <div class="btn-group" role="group">
                                        <button id="saveDesignerSize" data-toggle="" data-placement="bottom" title="{% trans "Save canvas size as default" %}" class="btn btn-success btn-sm " role="button" data-designer-size="{{ zoom }}">
                                            <i class="fa fa-floppy-o" aria-hidden="true"></i></button>
                                    </div>
                                </div>
                            </div>
                            {% set alignposinfo = {'Align Top': 0, 'Align Bottom': 1, 'Align Left': 2, 'Align Right': 3, 'Align V-Center': 4, 'Align H-Center': 5, 'Same Width':11, 'Same Height': 12, 'Same Size': 13, "Canvas V Center": 21, "Canvas H Center": 22, "Canvas Center": 23, "Same Canvas Width" : 24, "Same Canvas Height": 25, "Same Canvas Size" : 26, "Vertical Distribution": 31, "Horizontal Distriution": 32} %}                            
                            <div class="col-md-2 text-center">
                                <div class="btn-group regionAligmentDropdown pull-right">
                                    <button class="btn dropdown-toggle" data-toggle="dropdown">
                                        <span class="regionAligmentDropdown-tip" title="{% trans "Align region position/size" %}">{% trans "Region alignment" %}</span> <span class="caret"></span>
                                    </button>
                                    <ul class="dropdown-menu">
                                    <li>
                                            <a href="javascript:void(0)" onclick="DeSelecteAllRegion()">{% trans "Select None" %}</a>
                                    </li>
                                    {% for key,value in alignposinfo %}
                                        <li>
                                            <a href="javascript:void(0)" onclick="AdjustSelectedRegionPosition({{value}})">{% trans key %}</a>
                                        </li>
                                    {% endfor %}
                                    </ul>
                                </div>   
                            </div>                         
                            <div class="col-md-2 text-center">
                                <div class="btn-group" role="group" aria-label="...">
                                <div class="btn-group" role="group">
                                    <button id="layout-revert" class="btn btn-warning btn-sm disabled btn-block"  title="{% trans "Undo position change" %}">
                                        <i class="fa fa-undo" aria-hidden="true"></i> {% trans "" %}</button>
                                </div>
                                <div class="btn-group" role="group">
                                    <button id="layout-save-all" class="storylinelayout btn btn-success btn-sm disabled btn-block"  title="{% trans "Save Positions" %}">
                                        <i class="fa fa-floppy-o" aria-hidden="true"></i> {% trans "Save Positions" %}
                                    </button>
                                </div>
                            </div>
                        </div>

                    </div>
                    <div class="tab-pane no-pad fade" id="tab2primary">
                        <div class="col-md-6">
                            <div class="btn-group btn-group-justified" role="group" aria-label="...">
                                <div class="btn-group" role="group">
                                    <a class="btn btn-success btn-sm" role="button" href="{{ urlFor("layout.preview", {id: layout.layoutId}) }}" target="_blank"><span><i class="fa fa-eye" aria-hidden="true"></i> {% trans "Preview Layout" %}</span></a>
                                </div>
                                <div class="btn-group" role="group">
                                    <a class="XiboFormButton btn btn-info btn-sm" id="schedule-btn" role="button" href="{{ urlFor("schedule.now.form", {id: layout.campaignId, from: "Campaign"}) }}"><span><i class="fa fa-clock-o" aria-hidden="true"></i> {% trans "Schedule Now" %}</span></a>
                                </div>
                                <div class="btn-group" role="group">
                                    <a class="XiboFormButton btn btn-warning btn-sm" role="button" href="{{ urlFor("template.from.layout.form", {id: layout.layoutId}) }}"><span><i class="fa fa-floppy-o" aria-hidden="true"></i> {% trans "Save Template" %}</span></a>
                                    {% if layout.schemaVersion < 2 %}
                                        <a class="XiboFormButton btn btn-warning" role="button" href="{{ urlFor("layout.upgrade.form", {id: layout.layoutId}) }}"><span><i class="fa fa-floppy-o" aria-hidden="true"></i> {% trans "Upgrade Layout" %}</span></a>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            {% if isTemplate %}
                                <div class="alert no-pad alert-info text-right">{% trans "Editing a Template will only affect future Layouts." %}</div>
                            {% else %}
                                <div id="layout-status" class="alert no-pad text-center" style="margin-bottom: 0px;"></div>
                            {% endif %}
                        </div>

                    </div>
                </div>
            </div>
        </div>
        </div>
    </div>
    <!-- layout start -->
    <div class="row">
		<div class="col-md-4 layoutwidget" style="">

		</div>
		<div class="col-md-8 propertypanel" id="propertypanel">
			<div class="layoutproperty row  col-md-12">
			</div>
			<div class="regionproperty row col-md-12">
				<div id="regionpropertydimension" class="col-md-8"></div>
				<div id="regionpropertyoptions" class="col-md-4">
					<label><input type="checkbox" id="regionpropertiesloop" name="regionpropertiesloop">loop?</label>
				</div>
			</div>
			<div class="widgetproperty row  col-md-12">
			</div>								
		</div>
    </div>
	<div class="region-toolbox row">
		<div class="row">
		<div class="btn-group regionInfo pull-left">
			<button class="btn dropdown-toggle" data-toggle="dropdown">
				<span class="regionAligmentDropdown-tip" title="{% trans "Add regions" %}">{% trans "Add regions" %}</span> <span class="caret"></span>
			</button>				
			<ul class="dropdown-menu">
				<li class="storylineAddWidgetButton" data-hreftemplate="{{ urlFor("playlist.library.assign.form", {}) }}" href="{{ urlFor("playlist.library.assign.form", {}) }}"><a tabindex="-1" href="#">{% trans "Library" %}</a></li>
				{% for module in extra['modules'] %}
					{% if module.regionSpecific %}
						<li class="storylineAddWidgetButton" data-hreftemplate="{{ urlFor("module.widget.add.form", {type: module.type}) }}" href="{{ urlFor("module.widget.add.form", {type: module.type}) }}"><a tabindex="-1" href="#">{{ module.name }}</a></li>
					{% else %}
						<li class="storylineUploadLibraryMedia" href="#" data-playlist-id="" data-valid-ext="{{ module.validExtensions }}"><a tabindex="-1" href="#">{{ module.name }}</a></li>
					{% endif %}
				{% endfor %}
			</ul>
		</div>
		<input id="editregion" type="button" value="Edit Region" title="Edit Region"></input>
		<input id="editregionTimeline" type="button" value="Edit Region Timeline" title="Edit Region Timeline"></input>
		<input id="editregionPermission" type="button" value="Edit Region Permission" title="Edit Region Permission"></input>


		<input id="updatewidget" type="button" value="Edit Widget" title="Edit Widget"></input>
		<input id="deletewidget" type="button" value="Delete Widget" title="Delete Widget"></input>

		<input id="moveforward" type="button" value="Move Forward" title="Move Forward"></input>

		<input id="movebackward" type="button" value="Move Backward" title="Move Backward"></input>

		<input id="movefront" type="button" value="Move to front" title="Move to front"></input>

		<input id="moveend" type="button" value="Move to end" title="Move to End"></input>
		<input id="saveplaylistorder" type="button" value="Save Playlist Order" title="Save Playlist Order"></input>
		
		</div>
		<div class="row">
		<div id="visualization"></div>
		</div>
	</div>	
{% endblock %}

{% block javaScript %}
	<script src="{{ theme.uri("js/xibo-layout-designer.js") }}"></script>
	<script type="text/javascript">
		var translation = {
			savePositionsFirst: "{% trans "Please save the pending position changes first by clicking Save Positions or cancel by clicking Undo." %}"
		};

		// Callback for the media form
		function mediaFormCallBack() {
			// prevent filter form submit
			$("#libraryAssignFilterOptions").find("form").on("submit", function(e) {
				e.preventDefault();
				return false;
			});

			var mediaTable = $("#mediaAssignments").DataTable({
				"language": dataTablesLanguage,
				serverSide: true, stateSave: true,
				searchDelay: 3000,
				"order": [[1, "asc"]],
				"filter": false,
				ajax: {
					url: "{{ urlFor("library.search") }}",
					"data": function (d) {
						$.extend(d, $("#libraryAssignFilterOptions").find("form").serializeObject());
					}
				},
				"columns": [
					{"data": "mediaId"},
					{"data": "name"},
					{"data": "mediaType"},
					{
						"sortable": false,
						"data": function (data, type, row, meta) {
							if (type != "display")
								return "";

							// Create a click-able span
							return "<a href=\"#\" class=\"assignItem\"><span class=\"glyphicon glyphicon-plus-sign\"></a>";
						}
					}
				]
			});

			mediaTable.on('draw', function (e, settings) {
				dataTableDraw(e, settings);

				// Clicky on the +spans
				$(".assignItem", "#mediaAssignments").click(function () {
					// Get the row that this is in.
					var data = mediaTable.row($(this).closest("tr")).data();

					// Construct a new list item for the lower list and append it.
					var newItem = $("<li/>", {
						"text": " " + data.name,
						"data-media-id": data.mediaId,
						"class": "li-sortable",
						"dblclick": function () {
							$(this).remove();
						}
					});

					newItem.appendTo("#LibraryAssignSortable");

					// Add a span to that new item
					$("<span/>", {
						"class": "glyphicon glyphicon-minus-sign",
						click: function () {
							$(this).parent().remove();
						}
					}).prependTo(newItem);
				});
			});
			mediaTable.on('processing.dt', dataTableProcessing);

			// Make our little list sortable
			$("#LibraryAssignSortable").sortable();

			// Bind the filter form
			$("#libraryAssignFilterOptions").find("input, select").change(function () {
				mediaTable.ajax.reload();
			});
		}

		/**
			* Open Upload Form
			*/
		function openUploadForm(templateOptions, buttons) {

			// Close the current dialog
			XiboDialogClose();

			var template = Handlebars.compile($("#template-file-upload").html());

			// Handle bars and open a dialog
			bootbox.dialog({
				message: template(templateOptions),
				title: "{% trans "Upload media" %}",
				buttons: buttons,
				updateInAllChecked: {% if settings.LIBRARY_MEDIA_UPDATEINALL_CHECKB == "Checked" %}true{% else %}false{% endif %},
				deleteOldRevisionsChecked: {% if settings.LIBRARY_MEDIA_DELETEOLDVER_CHECKB == "Checked" %}true{% else %}false{% endif %}
			}).on('shown.bs.modal', function () {
				// Configure the upload form
				var url = "{{ urlFor("library.add") }}";
				var form = $(this).find("form");

				// Initialize the jQuery File Upload widget:
				form.fileupload({
					url: url,
					disableImageResize: false
				});

				// Upload server status check for browsers with CORS support:
				if ($.support.cors) {
					$.ajax({
						url: url,
						type: 'HEAD'
					}).fail(function () {
						$('<span class="alert alert-error"/>')
								.text('Upload server currently unavailable - ' + new Date())
								.appendTo(form);
					});
				}

				// Enable iframe cross-domain access via redirect option:
				form.fileupload(
						'option',
						'redirect',
						window.location.href.replace(
								/\/[^\/]*$/,
								'/cors/result.html?%s'
						)
				);

				form.bind('fileuploadsubmit', function (e, data) {
					var inputs = data.context.find(':input');
					if (inputs.filter('[required][value=""]').first().focus().length) {
						return false;
					}
					data.formData = inputs.serializeArray().concat(form.serializeArray());

					inputs.filter("input").prop("disabled", true);
				});
			});
		}

		// Click Handler for Library Upload Buttons (image, video, powerpoint, flash)
		function libraryUploadClick(e) {
			e.preventDefault();
			console.log($(this).data());
			console.log("here1 " + $(this).data().validExt);
			var validExt = $(this).data().validExt.replace(/,/g, "|");
			console.log("here2 " + $(this).data().playlistId);
			var playlistId = $(this).data().playlistId;
			console.log("playlistId:" + playlistId);
			openUploadForm({
				trans: {
					addFiles: "{% trans "Add files" %}",
					startUpload: "{% trans "Start upload" %}",
					cancelUpload: "{% trans "Cancel upload" %}"
				},
				upload: {
					maxSize: {{ libraryUpload.maxSize }},
					maxSizeMessage: "{{ libraryUpload.maxSizeMessage }}",
					validExt: validExt
				},
				playlistId: playlistId
			}, {
				library: {
					label: "{% trans "View Library" %}",
					callback: function () {
						XiboFormRender("{{ urlFor("playlist.library.assign.form") }}".replace(":id", playlistId.toString()));
					}
				},
				main: {
					label: "{% trans "Done" %}",
					className: "btn-primary",
					callback: function () {
						XiboFormRender(timelineForm.url, timelineForm.value);
					}
				}
			});
		}

		/**
			* Media Edit form
			*/
		function mediaEditFormOpen(dialog) {

			if (dialog.find("form").data().mediaEditable != 1)
				return;

			// Create a new button
			var footer = dialog.find(".modal-footer");
			var mediaId = dialog.find("form").data().mediaId;
			var widgetId = dialog.find("form").data().widgetId;
			var validExtensions = dialog.find("form").data().validExtensions;

			// Append
			var replaceButton = $('<button class="btn btn-warning">').html("{% trans "Replace" %}");
			replaceButton.click(function (e) {
				e.preventDefault();

				// Open the upload dialog with our options.
				openUploadForm({
					oldMediaId: mediaId,
					widgetId: widgetId,
					{% if config.LIBRARY_MEDIA_UPDATEINALL_CHECKB == "Checked" %}
					updateInAllChecked: true,
					{% else %}
					updateInAllChecked: false,
					{% endif %}
					trans: {
						addFiles: "{% trans "Add Replacement" %}",
						startUpload: "{% trans "Start Replace" %}",
						cancelUpload: "{% trans "Cancel Replace" %}",
						updateInLayouts: {
							title: "{% trans "Update this media in all layouts it is assigned to?" %}",
							helpText: "{% trans "Note: It will only be updated in layouts you have permission to edit." %}"
						},
						deleteOldRevisions: {
							title: "{% trans "Delete the old version?" %}",
							helpText: "{% trans "Completely remove the old version of this media item if a new file is being uploaded." %}"
						}
					},
					upload: {
						maxSize: {{ libraryUpload.maxSize }},
						maxSizeMessage: "{{ libraryUpload.maxSizeMessage }}",
						validExt: validExtensions
					}
				}, {
					main: {
						label: "{% trans "Done" %}",
						className: "btn-primary",
						callback: function () {
							XiboFormRender(timelineForm.url, timelineForm.value);
						}
					}
				});
			});

			footer.find(".btn-primary").before(replaceButton);
		}

		function timelineGridCallback(dialog) {

			dialog.addClass("modal-big");

			var timelineWidgetTabel = $("#timelineWidgets").DataTable({
				"language": dataTablesLanguage,
				serverSide: true, stateSave: true,
				filter: false,
				'ordering': false,
				searchDelay: 3000,
				//"order": [[0, "asc"]],
				//rowReorder: true,
				"createdRow": function( row, data, dataIndex ) {
					//console.log($(row));
					//console.log(data);
					$(row).attr('widgetid', data['widgetId']);
					$(row).attr('displayorder', data['displayOrder']);
				},         
				ajax: {
					url: "{{ urlFor("playlist.widget.search") }}",
					"data": function (d) {
						$.extend(d, $("#timelineWidgets").closest(".XiboGrid").find(".FilterDiv form").serializeObject());
					}
				},
				"columns": [
					{"data": "displayOrder", "orderable": false},
					{"data": "name", "orderable": false},
					{"data": "type", "orderable": false},
					{"data": "duration", "orderable": false},
					{"data": "transition", "orderable": false},
					{"data": "widgetId", "visible": false, "orderable": false},
					{
						"orderable": false,
						"data": dataTableButtonsColumn
					}
				]
			});
			$("#timelineWidgets tbody").sortable();
			timelineWidgetTabel.on('draw', dataTableDraw);
			timelineWidgetTabel.on('processing.dt', dataTableProcessing);
			// Hook up the library Upload Buttons
			$(".libraryUploadForm").click(libraryUploadClick);
		}

		function DeleteRegion(form, regionId) {
			$.ajax({
				type: form.attr("method"),
				url: form.attr("action"),
				cache: false,
				dataType: "json",
				data: form.serialize(),
				success: function (xhr, textStatus, error) {

					XiboSubmitResponse(xhr, form);

					if (xhr.success)
					{
						// remove all data from allWidgets about this regionid
						var widgetids = [];
						var regionCode = "region-" + regionId;
						widgetids = _allWidgets.getIds({
								filter: function (item) {
								return (item.group == regionId);
								}
							});
						_allWidgets.remove(widgetids);

						// remove groups
						_allRegions.remove(regionId);

						// remove region from layout
						$("#region_" + regionId).remove();
					}
					_SelectedRegionID = -1;						
				},
				error: function (xhr, textStatus, errorThrown) {
					SystemMessage(xhr.responseText, false);
				}
			});
		}
		refreshplaylistCallback = function() {
			$.ajax({
				type: "get",
				url: "{{ urlFor("playlist.search") }}",
				cache: false,
				dataType: "json"                        
			})
			.success(function(data) 
			{                 
				if (data.data.length > 0)
				{
					$("#medialist-draggable").html("");
					for (var m = 0; m < data.data.length; m++)
					{
						var playlist = data.data[m];
						var alink = playlist.thumbnail;
						//var alinkdom = $.parseHTML(alink);
						//console.log($(alinkdom));
						//console.log(playlist);
						var alttip = playlist.name + "/" + playlist.numberWidgets + "items";
						var html = '<li class="mediaitem mediaitemtooltip ui-state-default"';
						html = html + ' title="' + alttip + '"';
						html = html + ' id="m-' + playlist.playlistId + '"';
						//html = html + ' data-mediatype="' + media.mediaType + '"';
						html = html + ' data-playlistid="' + playlist.playlistId + '"';
						//html = html + ' data-mediafilesize="' + media.fileSize + '"';
						html = html + ' >';
						html = html + '<img style="vertical-align: initial;" width="92" height="68" src="' + playlist.thumbnail + '" alt="' + alttip + '" />';
						html = html + '<i class="fa fa-cog fa-fw medialistitemsettingicon medialistitemsettingiconOff"';
						html = html + ' data-playlistid=' + playlist.playlistId;
						var pltimelineformurl = "{{ urlFor('playlist.timeline.form')}}";
						pltimelineformurl = pltimelineformurl.replace(":id", playlist.playlistId);

						html = html + ' data-playlisteditformurl="' + pltimelineformurl + '?view=grid"'
						html = html + ' title="{% trans "Edit this playlist" %}"';
						html = html + ' ></i>';
						html = html + ' </li>';
						$("#medialist-draggable").append(html);
						//$(html).appendto("#medialist-draggable");                          
					}
					//$("#medialist-draggable").html($("#medialist-draggable").html());

					$('.medialistcarousel').jcarousel('reload');
					configureMedialistHandler();                        
				}
			});
		};
		// this will be called from layout-designer-page
		function playlistAddFormOpen() {
			$("#playlistAddForm").submit(function(e) {
				e.preventDefault();
				var form = $(this);

				//var url = $(this).data().redirect;
				var urlFormRedirect = $(this).data().formRedirect;
				$.ajax({
					type: $(this).attr("method"),
					url: $(this).attr("action"),
					data: $(this).serialize(),
					cache: false,
					dataType:"json",
					success: function(xhr, textStatus, error) {

						XiboSubmitResponse(xhr, form);

						if (xhr.success && urlFormRedirect != null) 
						{
							// Reload the designer
							XiboFormRender(urlFormRedirect.replace(":id", xhr.id.toString()));
						}
					}
				});
			});
		}
		// Bind to the add button when we load
		$(document).ready(function () {

			// Add region button
			$("#regionAddButton").click(function (e) {
				e.preventDefault();
				$.ajax({
					type: "post",
					url: $(this).attr("href"),
					cache: false,
					dataType: "json",
					success: function (xhr, textStatus, error) 
					{
						XiboSubmitResponse(xhr);

						if (xhr.success) 
						{
							console.log("added new region: " + xhr.id);
							var regionIDElement = '.region_' + xhr.id;
							var playlistid = xhr.data.playlists[0].playlistId;
							console.log("playlistid=" + playlistid);
							var regionName = "region-" + xhr.id;
							var colorName = "regioncolor-" + _pColorID;

							var urlRegionDeleteForm = "{{ urlFor("region.delete.form") }}";
							urlRegionDeleteForm = urlRegionDeleteForm.replace(":id", xhr.id.toString());
							var urlRegionEditForm = "{{ urlFor("region.edit.form") }}";
							urlRegionEditForm = urlRegionEditForm.replace(":id", xhr.id.toString());
							var urlRegionTimeLineForm = "{{ urlFor("region.timeline.form") }}";
							urlRegionTimeLineForm = urlRegionTimeLineForm.replace(":id", xhr.id.toString());
							var urlUserPermissionForm = "{{ urlFor("user.permissions.form", {entity: "Region"}) }}";
							urlUserPermissionForm = urlUserPermissionForm.replace(":id", xhr.id.toString()); 

							var urltimelineform = "{{ urlFor("region.timeline.form") }}";
							urltimelineform = urltimelineform.replace(":id", xhr.id.toString());
							var urlPreview = "{{ urlFor("region.preview") }}";
							urlPreview = urlPreview.replace(":id", xhr.id.toString());
							var urlResetPlaylist = "{{ urlFor("region.resetplaylist") }}";
							urlResetPlaylist = urlResetPlaylist.replace(":regionid", xhr.id.toString()); 
							//urlResetPlaylist = urlResetPlaylist.replace(":playlistid", playlistid.toString());  

							var obj = { id: xhr.id, 
											content: regionName, 
											title: regionName, 
											className: "regionSelector " + regionName + " " + colorName, 
											regionareaClassName : "",
											playlistid: playlistid,
											left: xhr.data.left, 
											top: xhr.data.top, 
											width: xhr.data.width, 
											height: xhr.data.height, 
											regioncode: regionName,
											duration: xhr.data.duration,
											zindex: xhr.data.zIndex,
											loop: xhr.data.loop,
											currentUserEditable: xhr.extra['currentUserEditable'],
											regiondataChanged: false,

											previewurl: urlPreview,
											resetplaylisturl: urlResetPlaylist,
											editregionoptionsurl: urlRegionEditForm,
											editregionpermissionurl: urlUserPermissionForm,
											editregiontimelineurl: urlRegionTimeLineForm,
											deleteregionurl: urlRegionDeleteForm,

											playlist: { 
												id: playlistid,
												description: xhr.data.playlists[0].description,
												widgets: []
											}
										 };

							_allRegions.add(obj);

							// create a new region
							var html = "";

							html = regionHTML(obj);
									
							$(html).appendTo('.layout');

							prepareRegionFunction();

							_pColorID++;
							_pColorID = _pColorID % 7;
							_regionID++;
							_plID++;							       
						}
					}
				})
				.done(function(data)
				{
					if (data)
					{
						// data.id::regionid
						// data.data: region
						// create a new region
					}
				});
			});

			// delete region button
			$("#regionDeleteButton").click(function (e) {

				e.preventDefault();

				console.log("regionDeleteButton: " + _SelectedRegionID);
				if (_SelectedRegionID != -1)
				{

					var actionurl = $(this).attr("href");
					actionurl = actionurl.replace(":id", _SelectedRegionID);

					XiboFormRender(actionurl);
				}
			});

			// Bind to the save/revert buttons
			$("#layout-save-all").off("click");
			$("#layout-save-all").on("click", function () 
			{
				// Save positions for all layouts / regions
				saveAllRegionPositions();
				return false;
			});	
			$("#saveplaylistorder").click(function() {
				saveMultiplePlaylistWidgetOrder();
			});

			$(".layout").keydown(function(event) {
				if (event.which == 17)
					_CtrlHold = true;
				console.log("keydown: code=" + event.which + " " + _CtrlHold);
			});
			$(".layout").keyup(function(event) {
				if (event.which == 17)
					_CtrlHold = false;
				console.log("keydown: code=" + event.which + " " + _CtrlHold);
			});	
			$('#regionpropertiesloop').click(function() {
				if (_SelectedRegionID != -1)
				{
					var regionobj = _allRegions.get(_SelectedRegionID);

					if (regionobj)
					{
						_allRegions.update({
							id: _SelectedRegionID,
							loop: $("#regionpropertiesloop").prop("checked") ? 1 : 0
						})
					}
					{
						$("#layout-save-all").removeClass("disabled");
						$("#layout-revert").removeClass("disabled");
					}			
				}
			});	

			$(".storylineAddWidgetButton").click(function(e)
			{
				console.log("storylineAddWidgetButton " + _SelectedRegionID);
				e.preventDefault();
				// first, fix playlist id
				if (_SelectedRegionID != -1)
				{
					// get playlistid
					var region = _allRegions.get(_SelectedRegionID);
					console.log("region: " + region);
					if (region)
					{
						var pid = region.playlistid;
						console.log("pid: " + pid);
						var urltemplate = $(this).data("hreftemplate");
						urltemplate = urltemplate.replace(":id", pid.toString());
						console.log(urltemplate);
						$(this).attr("href", urltemplate);
						XiboFormRender($(this));
					}
				}
				return false;
			});
			$(".storylineUploadLibraryMedia").click(function(e)
			{
				console.log("storylineUploadLibraryMedia " + _SelectedRegionID);

				//e.preventDefault();
				// first, fix playlist id
				if (_SelectedRegionID != -1)
				{
					// get playlistid
					var region = _allRegions.get(_SelectedRegionID);
					console.log("region: " + region);

					if (region)
					{
						var pid = region.playlistid;				
						$(this).data().playlistId = pid;

						e.preventDefault();
						var validExt = $(this).data().validExt.replace(/,/g, "|");
						var playlistId = $(this).data().playlistId;
						openUploadForm({
							trans: {
								addFiles: "{% trans "Add files" %}",
								startUpload: "{% trans "Start upload" %}",
								cancelUpload: "{% trans "Cancel upload" %}"
							},
							upload: {
								maxSize: {{ libraryUpload.maxSize }},
								maxSizeMessage: "{{ libraryUpload.maxSizeMessage }}",
								validExt: validExt
							},
							playlistId: playlistId
						}, {
							library: {
								label: "{% trans "View Library" %}",
								callback: function () {
									XiboFormRender("{{ urlFor("playlist.library.assign.form") }}".replace(":id", playlistId.toString()));
								}
							},
							main: {
								label: "{% trans "Done" %}",
								className: "btn-primary",
								callback: function () {
									XiboFormRender(timelineForm.url, timelineForm.value);
								}
							}
						});
					}
				}
			});	

			$("#deleteregion").click(function() {
				if (_SelectedRegionID != -1)
				{
					// remove all data from allWidgets about this regionid
					var widgetids = [];
					var regionCode = "region-" + _SelectedRegionID;
					widgetids = _allWidgets.getIds({
							filter: function (item) {
							return (item.id == _SelectedRegionID);
							}
						});
					_allWidgets.remove(widgetids);

					// remove groups
					_allRegions.remove(_SelectedRegionID);

					// remove region from layout
					$(".layout").find(".region." + regionCode).remove();
				}
				_SelectedRegionID = -1;
			});	


			$("#deletewidget").click(function() {
				e.preventDefault();

				selectedIds = _regionTimelines.getSelection();
				var hrefurl = "{{urlFor('module.widget.delete.form', {})}}";

				for (var wid in selectedIds)
				{
					var selW = _allWidgets.get(selectedIds[wid]);
					console.log(selW.group + " " + selW.id + " " + selW.duration + " " + selW.start);
					//_allWidgets.update({id: selW.id, duration: selW.duration + 5});
					//updateWidgetTimeStartFrom(_allWidgets, selW.group, selW.start);
					var actionurl = hrefurl.replace(":id", selW.id);

					XiboFormRender(actionurl);
				}
			});

			$("#updatewidget").click(function(e) {
				e.preventDefault();

				selectedIds = _regionTimelines.getSelection();
				var hrefurl = "{{urlFor('module.widget.edit.form', {})}}";

				for (var wid in selectedIds)
				{
					var selW = _allWidgets.get(selectedIds[wid]);
					console.log(selW.group + " " + selW.id + " " + selW.duration + " " + selW.start);
					//_allWidgets.update({id: selW.id, duration: selW.duration + 5});
					//updateWidgetTimeStartFrom(_allWidgets, selW.group, selW.start);
					var actionurl = hrefurl.replace(":id", selW.id);

					XiboFormRender(actionurl);
				}
			});

			$("#moveforward").click(function() {
				moveWidgePositionHandler(3);
			});
			$("#movebackward").click(function() {
				moveWidgePositionHandler(2);
			});
			$("#movefront").click(function() {
				moveWidgePositionHandler(0);
			});
			$("#moveend").click(function() {
				moveWidgePositionHandler(1);
			});

			$("#editregion").click(function(e) {
				if (_SelectedRegionID != -1)
				{
					var href= "{{ urlFor("region.edit.form", {}) }}";

					var actionurl = href.replace(":id", _SelectedRegionID);

					XiboFormRender(actionurl);
				}
			});

			$("#editregionPermission").click(function(e) {
				if (_SelectedRegionID != -1)
				{
					var href= "{{ urlFor("user.permissions.form", { entity: "Region" }) }}";

					var actionurl = href.replace(":id", _SelectedRegionID);

					XiboFormRender(actionurl);
				}
			});

			$("#editregionTimeline").click(function(e) {
				if (_SelectedRegionID != -1)
				{
					var href= "{{ urlFor("region.timeline.form", {}) }}";

					var actionurl = href.replace(":id", _SelectedRegionID);

					XiboFormRender(actionurl);
				}
			});														
		});
		/* end of document.ready() */
		addNewRegionWithRegionId2 = function(regionId, playlistid, originalLeft, originalTop,
											originalWidth, originalHeight, designerScale, regionZIndex,
											currentUsercheckEditable,
											regioncode,
											extraClassName)
		{
			var newRegionHtml = "";
			var currentUsercheckEditable = currentUsercheckEditable == 1 ? true : false;
			var layoutid = "{{ layout.layoutId }}";
			var layoutschemaVersion = {{ layout.schemaVersion }};
              
			var regionWidth = originalWidth * designerScale;
			var regionHeight = originalHeight * designerScale;
			var regionLeft = originalLeft * designerScale;
			var regionTop = originalTop * designerScale;

			var urlRegionDeleteForm = "{{ urlFor("region.delete.form") }}";
			urlRegionDeleteForm = urlRegionDeleteForm.replace(":id", regionId.toString());
			var urlRegionEditForm = "{{ urlFor("region.edit.form") }}";
			urlRegionEditForm = urlRegionEditForm.replace(":id", regionId.toString());
			var urlRegionTimeLineForm = "{{ urlFor("region.timeline.form") }}";
			urlRegionTimeLineForm = urlRegionTimeLineForm.replace(":id", regionId.toString());
			var urlUserPermissionForm = "{{ urlFor("user.permissions.form", {entity: "Region"}) }}";
			urlUserPermissionForm = urlUserPermissionForm.replace(":id", regionId.toString()); 

			var urltimelineform = "{{ urlFor("region.timeline.form") }}";
			urltimelineform = urltimelineform.replace(":id", regionId.toString());
			var urlPreview = "{{ urlFor("region.preview") }}";
			urlPreview = urlPreview.replace(":id", regionId.toString());
			var urlResetPlaylist = "{{ urlFor("region.resetplaylist") }}";
			urlResetPlaylist = urlResetPlaylist.replace(":regionid", regionId.toString()); 
			//urlResetPlaylist = urlResetPlaylist.replace(":playlistid", playlistid.toString());  

			var disabledCss = 'regionDis';
			var transparencyCss = 'Disabled';
			var previewCss = "regionPreview";                
			if (currentUsercheckEditable)
			{
				disabledCss = 'region';
				transparencyCss = '';
				previewCss = "regionPreview";
			}

			//<!-- region start -->
			newRegionHtml = newRegionHtml + '<div id="region_' + regionId + '"'; 
			newRegionHtml = newRegionHtml + ' regionEnabled="' + currentUsercheckEditable + '"';
			newRegionHtml = newRegionHtml + ' regionid="' + regionId + '"'; 
			newRegionHtml = newRegionHtml + ' layoutid="' + layoutid + '"';
			newRegionHtml = newRegionHtml + ' zindex="' + regionId + '"';
			newRegionHtml = newRegionHtml + ' tip_scale="1"';
			newRegionHtml = newRegionHtml + ' designer_scale="' + designerScale + '"'; 
			newRegionHtml = newRegionHtml + ' left = "' + originalLeft + '"';
			newRegionHtml = newRegionHtml + ' top = "' + originalTop + '"';
			newRegionHtml = newRegionHtml + ' width="' + originalWidth + '"'; 
			newRegionHtml = newRegionHtml + ' height="' + originalHeight + '"'; 
			newRegionHtml = newRegionHtml + ' duration=0';
			newRegionHtml = newRegionHtml + ' href="' + urltimelineform + '"'; 
			newRegionHtml = newRegionHtml + ' data-regioncode="' + regioncode + '"';
			newRegionHtml = newRegionHtml + ' data-regionid="' + regionId + '"';
			newRegionHtml = newRegionHtml + ' data-playlistid="' + playlistid + '"';
			if (currentUsercheckEditable)
			{
				newRegionHtml = newRegionHtml + ' ondblclick="XiboFormRender($(this))"';
			} 
			newRegionHtml = newRegionHtml + ' class="' + disabledCss + ' ' + previewCss + ' ' + extraClassName + ' regionitem regionsnappableitem"'; 
			newRegionHtml = newRegionHtml + ' data-preview-url="' + urlPreview + '"';
			newRegionHtml = newRegionHtml + ' data-reset-playlist-url="' + urlResetPlaylist + '"';

			newRegionHtml = newRegionHtml + ' data-edittimelineformurl="' + urlRegionTimeLineForm + '"';
			newRegionHtml = newRegionHtml + ' data-deleteregionurl="' + urlRegionDeleteForm + '"';
			newRegionHtml = newRegionHtml + ' data-editregionoptionsurl="' + urlRegionEditForm + '"';
			newRegionHtml = newRegionHtml + ' data-regionpermissionurl="' + urlUserPermissionForm + '"';

			newRegionHtml = newRegionHtml + ' style="position:absolute; width:' + regionWidth + 'px; height:' + regionHeight + 'px; top:' + regionTop + 'px; left:' + regionLeft + 'px; z-index:' + regionZIndex + ';margin:0px;padding:0px;">';

			/*
			newRegionHtml = newRegionHtml + ' <i class="fa fa-check fa-fw regionitemselectedicon regionselectediconOff"></i>';
				//<!-- region transparency background -->                            
			newRegionHtml = newRegionHtml + ' <div class="regionTransparency ' + transparencyCss + ' " style="width:100%; height:100%;"></div>';
			if (currentUsercheckEditable)
			{ 
				newRegionHtml = newRegionHtml + ' <div class="btn-group regionInfo pull-right">';
				newRegionHtml = newRegionHtml + ' <button class="btn dropdown-toggle" data-toggle="dropdown">';
				newRegionHtml = newRegionHtml + ' <span class="region-tip">' + originalWidth + ' x ' + originalHeight + ' (' + originalLeft + ' ,' + originalTop + ')</span> <span class="caret"></span>';
				newRegionHtml = newRegionHtml + ' </button>';
				newRegionHtml = newRegionHtml + ' <ul class="dropdown-menu">';
				newRegionHtml = newRegionHtml + ' <li>';
				newRegionHtml = newRegionHtml + ' <a class="XiboFormButton" href="' + urlRegionTimeLineForm + '">{% trans "Edit Timeline" %}</a>';
				newRegionHtml = newRegionHtml + ' </li>';
				newRegionHtml = newRegionHtml + ' <li>';
				newRegionHtml = newRegionHtml + ' <a class="RegionOptionsMenuItem" href="' + urlRegionEditForm + '">{% trans "Options" %}</a>';
				newRegionHtml = newRegionHtml + ' </li>';
				newRegionHtml = newRegionHtml + ' <li>';
				newRegionHtml = newRegionHtml + ' <a class="XiboFormButton" href="' + urlRegionDeleteForm + '">{% trans "Delete" %}</a>';
				newRegionHtml = newRegionHtml + ' </li>';
				newRegionHtml = newRegionHtml + ' <li>';
				newRegionHtml = newRegionHtml + ' <a class="XiboFormButton" href="' + urlUserPermissionForm + '">{% trans "Permissions" %}</a>';
				newRegionHtml = newRegionHtml + ' </li>';
				newRegionHtml = newRegionHtml + ' </ul>';
				newRegionHtml = newRegionHtml + ' </div>';
			}
			else if (currentUsercheckEditable && (layoutschemaVersion >= 2) )
			{
				newRegionHtml = newRegionHtml + ' <div class="regionInfo">';
				newRegionHtml = newRegionHtml + ' <span class="region-tip">' + originalWidth + ' x ' + originalHeight + ' (' + originalLeft + ' ,' + originalTop + ')</span> <span class="caret"></span>';
				newRegionHtml = newRegionHtml + ' </div>';                            
			}
			//<!-- region preview panel -->
			newRegionHtml = newRegionHtml + ' <div class="preview">';
			newRegionHtml = newRegionHtml + ' <div class="previewContent">';

			newRegionHtml = newRegionHtml + ' </div>';
			newRegionHtml = newRegionHtml + ' <div class="previewNav label label-info"></div>';
			newRegionHtml = newRegionHtml + ' </div>';
			*/
			newRegionHtml = newRegionHtml + ' </div>';
			return newRegionHtml;
		};
		addNewRegionWithRegionId = function(regionId, playlistid, originalLeft, originalTop,
											originalWidth, originalHeight, designerScale, regionZIndex,
											currentUsercheckEditable)
		{
			console.log(regionId + ' ' + originalLeft + ' ' + originalTop + ' ' + originalWidth + ' ' + originalHeight + ' ' + designerScale + ' ' + regionZIndex + ' ' + currentUsercheckEditable);
			var newRegionHtml = "";
			var currentUsercheckEditable = currentUsercheckEditable == 1 ? true : false;
			console.log(currentUsercheckEditable);
			var layoutid = "{{ layout.layoutId }}";
			var layoutschemaVersion = {{ layout.schemaVersion}};
			var urltimelineform = "{{ urlFor("region.timeline.form") }}";
			urltimelineform = urltimelineform.replace(":id", regionId.toString());
			var urlPreview = "{{ urlFor("region.preview") }}";
			urlPreview = urlPreview.replace(":id", regionId.toString());
			var urlResetPlaylist = "{{ urlFor("region.resetplaylist") }}";
			urlResetPlaylist = urlResetPlaylist.replace(":regionid", regionId.toString()); 
			urlResetPlaylist = urlResetPlaylist.replace(":playlistid", playlistid.toString());                
			
			var regionWidth = originalWidth * designerScale;
			var regionHeight = originalHeight * designerScale;
			var regionLeft = originalLeft * designerScale;
			var regionTop = originalTop * designerScale;

			var urlRegionDeleteForm = "{{ urlFor("region.delete.form") }}";
			urlRegionDeleteForm = urlRegionDeleteForm.replace(":id", regionId.toString());
			var urlRegionEditForm = "{{ urlFor("region.edit.form") }}";
			urlRegionEditForm = urlRegionEditForm.replace(":id", regionId.toString());
			var urlRegionTimeLineForm = "{{ urlFor("region.timeline.form") }}";
			urlRegionTimeLineForm = urlRegionTimeLineForm.replace(":id", regionId.toString());
			var urlUserPermissionForm = "{{ urlFor("user.permissions.form", {entity: "Region"}) }}";
			urlUserPermissionForm = urlUserPermissionForm.replace(":id", regionId.toString());                                                
			var disabledCss = 'regionDis';
			var transparencyCss = 'Disabled';
			var previewCss = "regionPreview";                
			if (currentUsercheckEditable)
			{
				disabledCss = 'region';
				transparencyCss = '';
				previewCss = "regionPreview";
			}

			//<!-- region start -->
			newRegionHtml = newRegionHtml + '<div id="region_' + regionId + '"'; 
			newRegionHtml = newRegionHtml + ' regionEnabled="' + currentUsercheckEditable + '"';
			newRegionHtml = newRegionHtml + ' regionid="' + regionId + '"'; 
			newRegionHtml = newRegionHtml + ' layoutid="' + layoutid + '"';
			newRegionHtml = newRegionHtml + ' zindex="' + regionId + '"';
			newRegionHtml = newRegionHtml + ' tip_scale="1"';
			newRegionHtml = newRegionHtml + ' designer_scale="' + designerScale + '"'; 
			newRegionHtml = newRegionHtml + ' left = "' + originalLeft + '"';
			newRegionHtml = newRegionHtml + ' top = "' + originalTop + '"';
			newRegionHtml = newRegionHtml + ' width="' + originalWidth + '"'; 
			newRegionHtml = newRegionHtml + ' height="' + originalHeight + '"'; 
			newRegionHtml = newRegionHtml + ' duration=0';
			newRegionHtml = newRegionHtml + ' href="' + urltimelineform + '"'; 
			if (currentUsercheckEditable)
			{
				newRegionHtml = newRegionHtml + ' ondblclick="XiboFormRender($(this))"';
			} 
			newRegionHtml = newRegionHtml + ' class="' + disabledCss + ' ' + previewCss + ' regionitem regionsnappableitem"'; 
			newRegionHtml = newRegionHtml + ' data-preview-url="' + urlPreview + '"';
			newRegionHtml = newRegionHtml + ' data-reset-playlist-url="' + urlResetPlaylist + '"';
			newRegionHtml = newRegionHtml + ' style="position:absolute; width:' + regionWidth + 'px; height:' + regionHeight + 'px; top:' + regionTop + 'px; left:' + regionLeft + 'px; z-index:' + regionZIndex + ';margin:0px;padding:0px;">';
			newRegionHtml = newRegionHtml + ' <i class="fa fa-check fa-fw regionitemselectedicon regionselectediconOff"></i>';
				//<!-- region transparency background -->                            
			newRegionHtml = newRegionHtml + ' <div class="regionTransparency ' + transparencyCss + ' " style="width:100%; height:100%;"></div>';
			if (currentUsercheckEditable)
			{ 
				newRegionHtml = newRegionHtml + ' <div class="btn-group regionInfo pull-right">';
				newRegionHtml = newRegionHtml + ' <button class="btn dropdown-toggle" data-toggle="dropdown">';
				newRegionHtml = newRegionHtml + ' <span class="region-tip">' + originalWidth + ' x ' + originalHeight + ' (' + originalLeft + ' ,' + originalTop + ')</span> <span class="caret"></span>';
				newRegionHtml = newRegionHtml + ' </button>';
				newRegionHtml = newRegionHtml + ' <ul class="dropdown-menu">';
				newRegionHtml = newRegionHtml + ' <li>';
				newRegionHtml = newRegionHtml + ' <a class="XiboFormButton" href="' + urlRegionTimeLineForm + '">{% trans "Edit Timeline" %}</a>';
				newRegionHtml = newRegionHtml + ' </li>';
				newRegionHtml = newRegionHtml + ' <li>';
				newRegionHtml = newRegionHtml + ' <a class="RegionOptionsMenuItem" href="' + urlRegionEditForm + '">{% trans "Options" %}</a>';
				newRegionHtml = newRegionHtml + ' </li>';
				newRegionHtml = newRegionHtml + ' <li>';
				newRegionHtml = newRegionHtml + ' <a class="XiboFormButton" href="' + urlRegionDeleteForm + '">{% trans "Delete" %}</a>';
				newRegionHtml = newRegionHtml + ' </li>';
				newRegionHtml = newRegionHtml + ' <li>';
				newRegionHtml = newRegionHtml + ' <a class="XiboFormButton" href="' + urlUserPermissionForm + '">{% trans "Permissions" %}</a>';
				newRegionHtml = newRegionHtml + ' </li>';
				newRegionHtml = newRegionHtml + ' </ul>';
				newRegionHtml = newRegionHtml + ' </div>';
			}
			else if (currentUsercheckEditable && (layoutschemaVersion >= 2) )
			{
				newRegionHtml = newRegionHtml + ' <div class="regionInfo">';
				newRegionHtml = newRegionHtml + ' <span class="region-tip">' + originalWidth + ' x ' + originalHeight + ' (' + originalLeft + ' ,' + originalTop + ')</span> <span class="caret"></span>';
				newRegionHtml = newRegionHtml + ' </div>';                            
			}
			//<!-- region preview panel -->
			newRegionHtml = newRegionHtml + ' <div class="preview">';
			newRegionHtml = newRegionHtml + ' <div class="previewContent">';

			newRegionHtml = newRegionHtml + ' </div>';
			newRegionHtml = newRegionHtml + ' <div class="previewNav label label-info"></div>';
			newRegionHtml = newRegionHtml + ' </div>';
			newRegionHtml = newRegionHtml + ' </div>';
			return newRegionHtml;
		};
		$("[name='my-checkbox']").bootstrapSwitch();
	</script>
	<script type="text/javascript">
		var _Scale = 1.0;
		var _CtrlHold = false;
		var _allRegions;
		// Create a DataSet (allows two way data-binding)
		var _allWidgets;

		var _regionTimelines;

		var _timelineOptions;

		var _timelineContainer;

		var _regionID = 15;
		var _plID = 25;
		var _pColorID = 6;
		var _pWidgetID = 26;
		var _SelectedRegionID = -1;
		
		// here, the content will be generate from server by twig
		// however, we still update these data dynamically later.

		var thislayoutinfo = { id: "{{ layout.layoutId }}", 
								zoom: "{{ zoom }}",
                                tip_scale: "1",
								designer_scale: "{{ designerScale }}",
                                className: "layout center-block col-md-12 layoutitem regionsnappableitem",
                                layoutid: "{{ layout.layoutId }}",
                                width: "{{layout.width}}",
                                height: "{{layout.height}}",
                                reswidth: "{{resolution.designerWidth}}",
                                resheight: "{{resolution.designerHeight}}", 
                                backgroundcolor: "{{ layout.backgroundColor }}", 
                                statusurl: "{{ urlFor("layout.status", {id: layout.layoutId}) }}", 
                                positionallurl: "{{ urlFor("region.position.all", {id: layout.layoutId}) }}", 
								backgroundcss: "{{ backgroundCss }}",
								schemaVersion: "{{ layout.schemaVersion }}",
		 regions: [
			 		{% set regioncolor = 0  %}
                    {% for region in layout.regions %}
                        {% set regionWidth = region.width * designerScale %}
                        {% set regionHeight = region.height * designerScale %}
                        {% set regionLeft = region.left * designerScale %}
                        {% set regionTop = region.top * designerScale %}

                        {# Disabled / Enabled CSS #}
                        {% if currentUser.checkEditable(region) %}
                            {% set disabledCss = "region" %}
                            {% set trasparencyCss = "" %}
                        {% else %}
                            {% set disabledCss = "regionDis" %}
                            {% set trasparencyCss = "regionDisabled" %}
                        {% endif %}

                        {% if currentUser.checkViewable(region) %}
                            {% set previewCss = "regionPreview" %}
                        {% else %}
                            {% set previewCss = "" %}
                        {% endif %}
						{% set regioncode = "region-" ~ region.regionId %}
						
						{% set regionColorCode = "regioncolor-" ~ regioncolor %}
						{% set regioncolor = (regioncolor + 1) % 6 %}
			{
				id: "{{ region.regionId }}", 
				regioncode: "{{ regioncode }}",
				content: "{{ regioncode }}", 
				title: "{{ regioncode }}", 
				className: "regionSelector {{ regioncode }} {{ regionColorCode }} ", 
				regionareaClassName: "{{ disabledCss }} {{ previewCss }} regionitem regionsnappableitem",
				
				left: {{ region.left }}, 
				top: {{ region.top }}, 
				width: {{ region.width }}, 
				height: {{ region.height }}, 
				duration: {{ region.duration }},
				href: "{{ urlFor("region.timeline.form", {id: region.regionId}) }}", 
                {% if currentUser.checkEditable(region) %} ondblclick: "XiboFormRender($(this))"{% endif %},
                previewurl: "{{ urlFor('region.preview', {id: region.regionId}) }}",
                resetplaylisturl: "{{ urlFor('region.resetplaylist', {regionid: region.regionId}) }}",
				editregionoptionsurl: "{{ urlFor("region.edit.form", {id: region.regionId}) }}",
				editregionpermissionurl: '{{ urlFor("user.permissions.form", {entity: "Region", id: region.regionId}) }}',
				editregiontimelineurl: '{{ urlFor("region.timeline.form", {id: region.regionId}) }}',
				deleteregionurl: "{{ urlFor('region.delete.form', {id: region.regionId}) }}",
				currentUserEditable: "{{ currentUser.checkEditable(region)}}",
				currentUserViewable: "{{ currentUser.checkViewable(region)}}",
				zindex: {{ region.zIndex }},
				loop: {{ region.loop }},
				regiondataChanged : false,
				{% if region.playlists|length > 0 %}
				playlistid: {{ region.playlists[0].playlistId }},
				playlist: { 
							id: {{ region.playlists[0].playlistId }},
							description: "{{wid.description }}",
							widgets: [
					{% for wid in region.playlists[0].widgets %}
							{
								duration: {{ wid.duration}}, 
								widgetid: {{ wid.widgetId }}, 
								type: "{{wid.type}}",
								displayOrder: {{wid.displayOrder}},
							{% if wid.medias|length > 0 %}
								mediaid: {{ wid.medias[0].mediaId }},
							{% else %}
								mediaid: -1,
							{% endif %}
							{% if wid.audio|length > 0 %}
								audiomediaid: {{ wid.audio[0].mediaId }},
							{% else %}
								audiomediaid: -1,
							{% endif %}
							},
					{% endfor %}								
							]}, 
				{% else %}
					playlistid: -1,
					playlist: { 
							id: -1,
							widgets: []
					},
				{%endif%}							

			},
			{% endfor %}
		] };	

		// Configuration for the Timeline
		InitTimelineData();

		updateLayoutInfo();

		$("#regionpropertyoptions").hide();
		function updateWidgetInfo(widgetid)
		{
			// get widget date from _allWidgets
			var widget = _allWidgets.get(widgetid);
			if (widget.length)
			{
				var intext = "widgetid: " + widget[0].id + " type: " + widget[0].widgettype + " duration: " + widget[0].duration;

				$(".widgetproperty").html(intext);
			}
		}
		function onWidgetSelectedHandler(properties)
		{
			// properties.items: selected item id
			//console.log("selected:" + properties.items);
			updateWidgetInfo(properties.items);
		}

		function onWidgetDoubleClickedHandler(properties)
		{
			console.log("double clicked:" + properties.item);
		}

		function onWidgetMouseOverHandler(properties)
		{
			var widget = _allWidgets.get(properties.item);
			var html = "id:" + widget.id + " start:" + widget.start + " end:" + widget.end;

			//$("#propertypanel").text(html);
		}

		function onWidgetMouseOutHandler(properties)
		{
			//$("#propertypanel").text("");
			//console.log("mouse out:" + properties.item);
		}
  // here, we need some functions:
  // 1. InitData(); initialize by data from server
  // 2. Update selected widget (duration): update back to server
  // 3. delete selected widget: update back to server
  // 4. add new widget: (create by server, then update locally)
  // 5. add new group: add a new region
  // 6. delete gropu: delete a region
  // 7. update group info: for tooltip
  // 8. update group by an existing playlist:
  // 9. layout region position manipulation:

  // add widget from widget object (wid)
  // regionid: also the group id
  // starttime: starting time in second

  	function regionHTML(obj)
	{
		// here, we would like to generate region for every pl
		return addNewRegionWithRegionId2(obj.id, obj.playlistid, obj.left, obj.top,
											obj.width, obj.height, _Scale, obj.zindex,
											obj.currentUserEditable,
											obj.regioncode,
											obj.className);
					
	}
	function addWidgets(all, wid, regionid, playlistid, starttime, displayOrder)
	{
		//console.log(wid);
		var endtime = starttime + wid.duration;
		var sh = Math.floor(starttime / 3600);
		var sm = Math.floor((starttime - sh * 3600) / 60);
		var ss = starttime % 60;
		var eh = Math.floor(endtime / 3600);
		var em = Math.floor((endtime - eh * 3600) / 60);
		var es = endtime % 60;
		//console.log(starttime + " " + endtime);
		all.add({
				id: wid.widgetid, 
				widgetid: wid.widgetid, 
				duration: wid.duration,
				start: new Date(1971, 3, 25, sh, sm, ss),
				end: new Date(1971, 3, 25, eh, em, es),
				title: "widget-" + wid.widgetid,
				tooltip: "widget-" + wid.widgetid,
				className: wid.type,
				group: regionid,
				regionid: regionid,
				widgettype: wid.type,
				playlistid: playlistid,
				mediaid: wid.mediaid,
				audiomediaid: wid.audiomediaid,
				displayOrder: displayOrder });
	}
  // pl is the widget object list
	function addPlaylist(all, playlist, regionid)
	{
		var starttime = 0;
		var displayOrder = 1;
		for (var w in playlist.widgets)
		{
			addWidgets(all, playlist.widgets[w], regionid, playlist.id, starttime, displayOrder);
			starttime += playlist.widgets[w].duration;
			displayOrder++;
		}
	}

	function newLayout(layoutinfo)
	{
		var cssW = 384;
		var cssH = 216;

		if (layoutinfo.width < layoutinfo.height)
		{
			cssW = 216;
			cssH = 384;
		}

		var y_Scale = cssH / layoutinfo.height;
		var x_Scale = cssW / layoutinfo.width;
		_Scale = Math.min(x_Scale, y_Scale);		
		var layouthtml = '<div tabindex="0" id="layout" class="layout" ' + 
								'layoutid="' + layoutinfo.id + '"' + 
                                'width="' + layoutinfo.width + '"' + 
                                'height ="' + layoutinfo.height  + '"' + 
                                'reswidth="' + layoutinfo.width  + '"' + 
                                'resheight ="' + layoutinfo.height  + '"' + 
                                'data-background-color="' + layoutinfo.backgroundcolor + '"' +  
                                'data-status-url="' + layoutinfo.statusurl  + '"' + 
                                'data-position-all-url="' + layoutinfo.positionallurl  + '"' + 
                                		
							'style="outline: 0 solid; position:relative;  ' + 
							'width: ' + cssW + 'px;  ' + 
							'height: ' + cssH + 'px;  ' + 
							'margin:0px;  ' + 
							'padding: 0px; background: ' + layoutinfo.backgroundcolor + '; border: 0px;"> ' + 
							'</div>';
		$(".layoutwidget").html(layouthtml);
				
		if (_allRegions)
			_allRegions.destroy();
		_allRegions = new vis.DataSet();

		if (_allWidgets)
			_allWidgets.destroy();
		_allWidgets = new vis.DataSet();

		
		for (var r in layoutinfo.regions)
		{
			_allRegions.add(layoutinfo.regions[r]);

			addPlaylist(_allWidgets, layoutinfo.regions[r].playlist, layoutinfo.regions[r].id);
		}

		_timelineOptions = {
			editable: {
				add: false,         // add new items by double tapping
				updateTime: false,  // drag items horizontally
				updateGroup: false, // drag items from one group to another
				remove: false       // delete an item by tapping the delete button top right
			},
			orientation: 'top',

			groupEditable: false,
			//start: new Date(1971, 5, 1, 0, 0, 0),
			//end: new Date(1971, 5, 1, 1, 0, 0),
			stack: false,
			max: new Date(1971, 3, 25, 23, 59, 50),
			min: new Date(1971, 3, 25, 0, 0, 0),
			showMajorLabels: false,
			clickToUse: false,
			showCurrentTime: false,
			zoomable: true,
			template: function (widget) {
				var html = "widget-" + widget.widgetid;
				return html;
			},
			groupTemplate: function(group) {
				var html = '<div class="regionLabel ' + 
								group.className + ' ' + 
								group.regioncode + 
								'" data-regioncode="' + group.regioncode + '"' + 
								'  data-regionid="' + group.id + '"' + 
								'>region-' + group.id + "</div>";
				return html;
			},
			dataAttributes: ['tooltip', 'id', 'title', 'duration', 'widgetid', 'type', "regionid"],
			margin: { axis: 5 },	// important, to get rid of top space between axis and the first timeline
		};
		// Create a Timeline
		// DOM element where the Timeline will be attached
		_timelineContainer = document.getElementById('visualization');

		if (_regionTimelines)
			_regionTimelines.destroy();

		_regionTimelines = new vis.Timeline(_timelineContainer);

		_regionTimelines.setOptions(_timelineOptions);
		_regionTimelines.setGroups(_allRegions);
		_regionTimelines.setItems(_allWidgets);

		_regionTimelines.on('select', onWidgetSelectedHandler);
		_regionTimelines.on('doubleClick', onWidgetDoubleClickedHandler);
		_regionTimelines.on('itemover', onWidgetMouseOverHandler);
		_regionTimelines.on('itemout', onWidgetMouseOutHandler);

		var rhtml = "";
		_allRegions.forEach(function(obj) {
			// here, we would like to generate region for every pl
			rhtml += regionHTML(obj);
		});
		$(".layout").html(rhtml);
		prepareRegionFunction();		
	}

	function InitTimelineData()
	{
		newLayout(thislayoutinfo);
	}

	function updateRegionInfo(item, bSelectOnly) 
	{
		var pos = $(item).position();
		var region = _allRegions.get(_SelectedRegionID);

		var intext = "id:" + region.id + " playlist-id: " + region.playlistid;
		var newLeft = Math.round(pos.left / _Scale, 0);
		var newTop = Math.round(pos.top / _Scale, 0);
		var newWidth = Math.round($(item).width() / _Scale, 0);
		var newHeight = Math.round($(item).height() / _Scale, 0);
		$('#regionpropertydimension').html("Region-" + region.id + ": " + 
									newWidth + 
									" x " + 
									newHeight + 
									" (" + 
										newLeft + 
										"," + 
										newTop + ") z-order:" + region.zindex);
		$("#regionpropertyoptions").show();										
		$('#regionpropertiesloop').prop('checked', (region.loop == 1));

		$(item).attr("width", newWidth).attr("height", newHeight)
				.attr("left", newLeft)
				.attr("top", newTop);

		// Expose a new button to save the positions
		if (!bSelectOnly)
		{
			$("#layout-save-all").removeClass("disabled");
			$("#layout-revert").removeClass("disabled");
		}										
	}
	function updateLayoutInfo() 
	{
		$('.layoutproperty').html("Layout size: " + thislayoutinfo.width + " x " + thislayoutinfo.height);
	}	
	function prepareRegionFunction()
	{
		var thisLayout = $(".layout");
		thisLayout.find(".region")
		.draggable({
			containment: thisLayout,
            //stop: regionPositionUpdateNoRefreshPreview,
            drag: function(event, ui) {        
                updateRegionInfo(ui.helper, false);
            },
            start: function(event, ui) {
            },
            grid: [ 5, 5 ],
            snap: ".region, .layout",
            snapTolerance: 10})
		.resizable({
			containment: thisLayout,
			minWidth: 25,
			minHeight: 25,
			//stop: regionPositionUpdate,
			resize: function(event, ui) {        
                updateRegionInfo(ui.helper, false);
            },
            grid: [ 5, 5 ],
            snap: ".region, .layout",
            snapTolerance: 5
		})
		.selectable(
			{
				selected: function(event, ui) {        
                					updateRegionInfo(ui.helper, true);
            					}
			}
		);

		$(".regionSelector").click(function() {
			var regionCode;
			var selectedID = -1;

			if ($(this).hasClass("regionLabel"))
			{
				regionCode = $(this).data('regioncode');
				selectedID = $(this).data('regionid');
			}
			else if ($(this).hasClass("region"))
			{
				regionCode = $(this).data('regioncode');
				selectedID = $(this).data('regionid');	
				{
					toggleRegionSelectedIcon($(this));
				}
				$(".layout").focus();			
			} else
			{
				var lbl = $(this).find(".regionLabel");
				if (lbl)
				{
					regionCode = $(lbl).data('regioncode');
					selectedID = $(lbl).data('regionid');
				}
			}

			if (regionCode)
			{
				if (_CtrlHold == false || _SelectedRegionID == -1)
				{
					$(".regionSelector").removeClass("regionSelected");
					$("." + regionCode).addClass("regionSelected");
					_SelectedRegionID = selectedID;

					updateRegionInfo($(".layout").find("." + regionCode), false);
					DeSelecteAllRegion();					
				}
			}
			console.log("Selected RID=" + _SelectedRegionID + " regioncode=" + regionCode);
		});			
	}



	// widgetid: widget id
	// starttime: starting time in second
	// duration: in second
	function updateWidgetStartEndTime(all, widgetid, starttime, duration, displayOrder)
	{
		var endtime = starttime + duration;
		var sh = Math.floor(starttime / 3600);
		var sm = Math.floor((starttime - sh * 3600) / 60);
		var ss = starttime % 60;
		var eh = Math.floor(endtime / 3600);
		var em = Math.floor((endtime - eh * 3600) / 60);
		var es = endtime % 60;
		all.update({
					id: widgetid, 
					start: new Date(1971, 3, 25, sh, sm, ss),
					end: new Date(1971, 3, 25, eh, em, es),
					displayOrder: displayOrder});
	}
	// update playlist widget time start at baseST
	function updateWidgetTimeStartFrom(all, regionid, baseST)
	{
		var starttime = baseST.getHours() * 3600 + baseST.getMinutes() * 60 + baseST.getSeconds();

		widgets = all.get({
					filter: function (item) {
					return (item.start.getTime() >= baseST.getTime() && item.group == regionid);
					},
					order: "start"
		});
		for (var w in widgets)
		{
			updateWidgetStartEndTime(all, widgets[w].widgetid, starttime, widgets[w].duration, widgets[w].displayOrder);

			starttime += widgets[w].duration;
		}
	}
	// update duration of single widget, also, update all the followed widget starting/end time
	function updateWidgetDuration(all, regionid, widgetid, newDuration)
	{
		// update duration of that widget
		// also, update all widget of following widgets
		widget = all.get({
					filter: function (item) {
					return (item.id == widgetid && item.group == regionid);
					}
		});
		if (widget.length)
		{
			all.update({id: widgetid, duration: newDuration});
			var baseST = widget[0].start;

			updateWidgetTimeStartFrom(all, regionid, baseST);
		}
	}
	// delete widget
	function deleteWidget(all, regionid, widgetid)
	{
		all.remove(widgetid);
		var baseST = new Date(1971, 3, 25, 0, 0, 0);
		updateWidgetTimeStartFrom(all, regionid, baseST);
	}

	// mode: 0: move to head, 1: move to end, 2: move forward, 3: move next
	function moveWidget(all, regionid, widgetid, mode)
	{
		var anchorWidget = all.get(widgetid);
		var toBeUpdate = [];
		var starttime = 0;
		var displayOrder = 1;
		if (anchorWidget.length)
			return;

		if (mode == 0)
		{
			starttime = 0;
			displayOrder = 1;
			updateWidgetStartEndTime(all, widgetid, starttime, anchorWidget.duration, displayOrder);
			starttime += anchorWidget.duration;
			displayOrder++;
			toBeUpdate = all.get({
						filter: function (item) {
							return (item.group == regionid && item.id != widgetid);
						}
					});
			for (var w in toBeUpdate)
			{
				updateWidgetStartEndTime(all, toBeUpdate[w].widgetid, starttime, toBeUpdate[w].duration, displayOrder);

				starttime += toBeUpdate[w].duration;
				displayOrder++;
			}
		} else if (mode == 1) // append
		{
			starttime = 0;
			displayOrder = 1;
			toBeUpdate = all.get({
						filter: function (item) {
							return (item.group == regionid && item.id != widgetid);
						}
					});
			for (var w in toBeUpdate)
			{
				updateWidgetStartEndTime(all, toBeUpdate[w].widgetid, starttime, toBeUpdate[w].duration, displayOrder);

				starttime += toBeUpdate[w].duration;
				displayOrder++;
			}

			updateWidgetStartEndTime(all, widgetid, starttime, anchorWidget.duration, displayOrder);
		} else if (mode == 2) // move forward
		{
			var targetWidget = all.get({
						filter: function (item) {
							return (item.group == regionid && item.end.getTime() == anchorWidget.start.getTime());
						}
					});

			if (targetWidget.length)
			{
				var baseST = targetWidget[0].start;
				starttime = baseST.getHours() * 3600 + baseST.getMinutes() * 60 + baseST.getSeconds();
				displayOrder = targetWidget[0].displayOrder;

				updateWidgetStartEndTime(all, anchorWidget.id, starttime, anchorWidget.duration, displayOrder);
				starttime += anchorWidget.duration;
				displayOrder++;
				updateWidgetStartEndTime(all, targetWidget[0].id, starttime, targetWidget[0].duration, displayOrder);
			}
		} else if (mode = 3) // move afterward
		{
			var targetWidget = all.get({
						filter: function (item) {
							return (item.group == regionid && item.start.getTime() == anchorWidget.end.getTime());
						}
					});
			if (targetWidget.length)
			{
				var baseST = anchorWidget.start;
				starttime = baseST.getHours() * 3600 + baseST.getMinutes() * 60 + baseST.getSeconds();
				displayOrder = anchorWidget.displayOrder;
				updateWidgetStartEndTime(all, targetWidget[0].id, starttime, targetWidget[0].duration, displayOrder);
				starttime += targetWidget[0].duration;
				displayOrder++;
				updateWidgetStartEndTime(all, anchorWidget.id, starttime, anchorWidget.duration, displayOrder);
			}
		}
	}

	function insertWidget(all, regionid, widget, startST, bAppend, bUpdateOthers, startDisplayOrder)
	{
		var toBeUpdate = [];

		if (bUpdateOthers || bAppend)
		{
			if (bAppend)
			{
				toBeUpdate = all.get({
							filter: function (item) {
								return (item.group == regionid);
							}
						});
			}
			else
			{
				toBeUpdate = all.get({
							filter: function (item) {
								return (item.group == regionid && item.start.getTime() >= startST.getTime());
							}
						});
			}
		}

		var starttime = startST.getHours() * 3600 + startST.getMinutes() * 60 + startST.getSeconds();
		var displayOrder = startDisplayOrder;

		if (bAppend)
		{
			starttime = 0;
			displayOrder = 1;
		}
		if (!bAppend)
		{
			addWidgets(all, widget, regionid, starttime, displayOrder);
			starttime += widget.duration;
			displayOrder++;
		}

		if (bUpdateOthers || bAppend)
		{
			for (var w in toBeUpdate)
			{
				if (!bAppend)
					updateWidgetStartEndTime(all, toBeUpdate[w].widgetid, starttime, toBeUpdate[w].duration, displayOrder);

				starttime += toBeUpdate[w].duration;
				displayOrder++;
			}
		}
		if (bAppend)
		{
			addWidgets(all, widget, regionid, starttime, displayOrder);
		}		
	}


	function moveWidgePositionHandler(mode)
	{
		selectedIds = _regionTimelines.getSelection();
		for (var wid in selectedIds)
		{
			var selW = _allWidgets.get(selectedIds[wid]);
			console.log("mode: " + mode + " " + selW.group + " " + selW.id + " " + selW.duration + " " + selW.start + " " + selW.displayOrder);
			moveWidget(_allWidgets, selW.group, selW.id, mode);
		}	
	}
	
	function editLayoutCallback(xhr)
	{
		// try to update layout size and background color
		var cssW = 384;
		var cssH = 216;
		var layoutobj = xhr.data;

		if (layoutobj.width < layoutobj.height)
		{
			cssW = 216;
			cssH = 384;
		}

		var y_Scale = cssH / layoutobj.height;
		var x_Scale = cssW / layoutobj.width;
		_Scale = Math.min(x_Scale, y_Scale);	
		var thislayout = $(".layout");

		$(thislayout).attr("width", layoutobj.width);	
		$(thislayout).attr("height", layoutobj.height);	
		$(thislayout).attr("reswidth", layoutobj.width);	
		$(thislayout).attr("resheight", layoutobj.height);	
		$(thislayout).data("backgroundColor", layoutobj.backgroundColor);	
		$(thislayout).css("width", cssW + "px");
		$(thislayout).css("height", cssH + "px");
		$(thislayout).css("height", cssH + "px");
		$(thislayout).css("background", layoutobj.backgroundColor);
	}
	function editWidgetCallback(xhr)
	{
		console.log("editWidgetCallback");

		var widgetid = xhr.extra['widgetid'];
		var module = xhr.data;	// module object
		// find this widget from _allWidgets

		var wid = _allWidgets.get({
			filter: function(item) {
					return (item.id == widgetid);
				}
		});
		if (wid.length)
		{
			var widget = _allWidgets.get(wid[0]);
			// widget.group is regionID
			_allWidgets.update({
								id: widgetid, 
								duration: module.widget.duration
								}
							);
			updateWidgetTimeStartFrom(_allWidgets, widget.group, widget.start);
		}
	}

	function deleteWidgetCallback(xhr)
	{
		console.log("deleteWidgetCallback");

		var widgetid = xhr.extra['widgetid'];
		var module = xhr.data;	// module object
		// find this widget from _allWidgets

		var wid = _allWidgets.get({
			filter: function(item) {
					return (item.id == widgetid);
				}
		});
		if (wid.length)
		{
			var widget = _allWidgets.get(wid[0]);
			// widget.group is regionID
			_allWidgets.remove(widgetid);
			var baseST = new Date(1971, 3, 25, 0, 0, 0);
			updateWidgetTimeStartFrom(_allWidgets, widget.group, baseST);
		}
	}

	function addwidgetCallback(xhr)
	{
		// in this function, it is called when a new widget (region specific) is created and added to 
		// a playlist, then callback to page
		console.log("addwidgetCallback");

		// first clear all widgets of region in _SelectedRegionID
		var playlists = {};

		var widgetids = [];
		var regionCode = "region-" + _SelectedRegionID;
		widgetids = _allWidgets.getIds({
				filter: function (item) {
				return (item.group == _SelectedRegionID);
				}
			});
		_allWidgets.remove(widgetids);		

		if (xhr.extra['playlist'])
		{
			playlists['id'] = xhr.extra['playlist'].playlistId;
			playlists['description'] = "";
			playlists['widgets'] = [];

			for (wid in xhr.extra['playlist'].widgets)
			{
				var widget = xhr.extra['playlist'].widgets[wid];
				var mediaid = -1;
				var audiomediaid = -1;
				if (widget.medias)
				{
					if (widget.medias.length)
					{
						mediaid = widget.medias[0].mediaId;
					}
				}
				if (widget.audio)
				{
					if (widget.audio.length)
					{
						audiomediaid = widget.audio[0].mediaId;
					}
				}
				playlists['widgets'].push({
					id: widget.widgetId,
					widgetid: widget.widgetId,
					duration: widget.duration,
					type: widget.type,
					displayOrder: widget.displayOrder,
					mediaid: mediaid,
					audiomediaid: audiomediaid,
				});
			}
			addPlaylist(_allWidgets, playlists, _SelectedRegionID);		
		}
	}

	function libraryAssignCallback(xhr)
	{
		// in this function, it is called when lots of new widget (non-region specific) is created and added to 
		// a playlist, then callback to page
		// we need to re-create playlist of that specific region
		console.log("libraryAssignCallback");

		addwidgetCallback(xhr);
	}


	function saveAllRegionPositions() {
		console.log("saveAllRegionPositions");
		// Update all layouts
		var thisLayout = $(".layout");

		{
			$("#layout-save-all").addClass("disabled");
			$("#layout-revert").addClass("disabled");

			// Store the Layout ID
			var url = $(thisLayout).data().positionAllUrl;
			// Build an array of
			var regions = new Array();

			$(thisLayout).find(".region").each(function()
			{
				var position = $(this).position();
				var regionid = $(this).attr("regionid");
				var regionObj = _allRegions.get(regionid);
				var region = {
					width: $(this).width() / _Scale,
					height: $(this).height() / _Scale,
					top: position.top / _Scale,
					left: position.left / _Scale,
					regionid: regionid,
					loop: regionObj.loop
				};

				// Update the region width / height attributes
				$(this).attr("width", region.width).attr("height", region.height);

				// Add to the array
				regions.push(region);
			});

			$.ajax({
					type: "put",
					url: url,
					cache: false,
					dataType: "json",
					data: {regions : JSON.stringify(regions) },
					success: XiboSubmitResponse
				});
		}
	}	

	// playlist save order from grid view (playlist editing)
	function saveMultiplePlaylistWidgetOrder() 
	{
		var actionurl = "{{ urlFor("playlist.orderformultipleplaylists", {}) }}";
		var i = 0;
		var playlists = {};

		_allRegions.forEach(function(regionobj) {
			// here, we would like to generate region for every pl
			
			var widgets = {};
			var wsets = _allWidgets.get({
						filter: function (item) {
							return (item.group == regionobj.id);
						},
						order: "start"
						});
			for (var w in wsets)
			{
				widgets[wsets[w].widgetid] = wsets[w].displayOrder;
			}
			playlists[regionobj.playlistid] = widgets;	
		});	
    

		console.log('new multiple PL order: ');
		console.log(playlists);
		// Call the server to do the reorder
		$.ajax({
			type:"post",
			url: actionurl,
			cache:false,
			dataType:"json",
			data:{
				"playlists": playlists
			},
			success: [
				XiboSubmitResponse
			]
		});
	};
	function editRegionCallback(xhr) {
		// we have to redraw region and _allRegions
		// left, top, width, height, zindex, loop, background audio
		var region = xhr.data;

		_allRegions.update({
			id: region.regionId,
			width: region.width,
			height: region.height,
			left: region.left,
			top: region.top,
			zindex: region.zIndex,
			loop: region.loop
		});

		var regionCode = "region_" + region.regionId;

		var regionele = $("#" + regionCode);
		var cssLeft = region.left * _Scale;
		var cssTop = region.top * _Scale;
		var cssWidth = region.width * _Scale;
		var cssHeight = region.height * _Scale;

		$(regionele).attr("width", region.width);
		$(regionele).attr("height", region.height);
		$(regionele).attr("left", region.left);
		$(regionele).attr("top", region.top);
		$(regionele).attr("zindex", region.zIndex);
		$(regionele).attr("loop", region.loop);

		$(regionele).css("z-index", region.zIndex);
		$(regionele).css("left", cssLeft);
		$(regionele).css("top", cssTop);
		$(regionele).css("width", cssWidth);
		$(regionele).css("top", cssTop);
		updateRegionInfo();
	}
</script>
	{% for module in modules %}
		{% if module.layoutDesignerJavaScript() != "" %}
			{% include module.layoutDesignerJavaScript() ~ ".twig" %}
		{% endif %}
	{% endfor %}

{% endblock %}
