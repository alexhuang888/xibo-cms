{#
/*
 * Spring Signage Ltd - http://www.springsignage.com
 * Copyright (C) 2015 Spring Signage Ltd
 * (${FILE_NAME})
 */

#}
{% extends "authed.twig" %}
{% import "inline.twig" as inline %}
{% block actionMenu %}
    <ul class="nav nav-pills pull-right">
        <li class="btn btn-success btn-xs"><a class="XiboFormButton btns" title="{% trans "Add a new playlist" %}" href="{{ urlFor("playlist.add.form") }}"><i class="fa fa-plus-circle" aria-hidden="true"></i> {% trans "Add Playlist" %}</a></li>
    </ul>
{% endblock %}
{% block pageContent %}
    <div class="widget">
        <div class="widget-title">{% trans "Playlists" %}</div>
        <div class="widget-body">
            <div class="XiboGrid" id="{{ random() }}" data-grid-name="playlistView">
                <div class="XiboFilter well">
                    <div class="FilterDiv" id="Filter">
                        <form class="form-inline">

                            {% set name %}{% trans "Name" %}{% endset %}
                            {{ inline.input("name", name) }}

                            {% set tags %}{% trans "Tags" %}{% endset %}
                            {{ inline.input("tags", tags) }}

                            {% set title %}{% trans "AI-aware" %}{% endset %}
                            {% set values = [{id: 2, value: "All"}, {id: 1, value: "Yes"}, {id: 0, value: "No"}]%}
                            {{ inline.dropdown("isaitagmatchable", "single", title, 2, values, "id", "value") }}                             
                        </form>
                    </div>
                </div>
                <div class="XiboData">
                    <table id="playlists" class="table table-striped">
                        <thead>
                            <tr>
                                <th>{% trans "ID" %}</th>
                                <th>{% trans "Name" %}</th>
                                <th>{% trans "Descriptions" %} </th>
                                <th>{% trans "AI-aware" %} </th>
                                <th>{% trans "# Widgets" %} </th>
                                <th>{% trans "Thumbnail" %} </th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>

                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javaScript %}
    <script src="{{ theme.uri("js/xibo-playlist-designer.js") }}"></script>
    <script type="text/javascript">
        $(document).ready(function() {
            var table = $("#playlists").DataTable({
                "language": dataTablesLanguage,
                serverSide: true, stateSave: true,
                filter: false,
                searchDelay: 3000,
                "order": [[1, "asc"]],
                ajax: {
                    "url": "{{ urlFor("playlist.search") }}",
                    "data": function(d) {
                    $.extend(d, $("#playlists").closest(".XiboGrid").find(".FilterDiv form").serializeObject());
                }
                },
                "columns": [
                    {"data": "playlistId"},
                    {"data": "name"},
                    {
                        "name": "description",
                        "data": null,
                        "render": {"_": "description", "display": "description", "sort": "description"}
                    },
                    {"data": "isaitagmatchable", "visible": true, "render": dataTableTickCrossColumn},
                    {"data": "numberWidgets"},
                    {
                        "name": "layoutId",
                        "data": null,
                        "render": {"_": "gridThumbnail", "display": "gridThumbnail", "sort": "playlistId"}
                    },                    
                    {
                        "orderable": false,
                        "data": dataTableButtonsColumn
                    }
                ]
            });

            table.on('draw', dataTableDraw);
            table.on('processing.dt', dataTableProcessing);
            dataTableAddButtons(table, $('#playlists_wrapper').find('.col-sm-6').eq(1));
        });
     

            var translation = {
                savePositionsFirst: "{% trans "Please save the pending position changes first by clicking Save Positions or cancel by clicking Undo." %}"
            };

            // Callback for the media form
            function mediaFormCallBack() {
                var mediaTable = $("#mediaAssignments").DataTable({
                    "language": dataTablesLanguage,
                    serverSide: true, stateSave: true,
                    searchDelay: 3000,
                    "order": [[1, "asc"]],
                    "filter": false,
                    ajax: {
                        url: "{{ urlFor("library.search") }}",
                        "data": function (d) {
                            $.extend(d, $("#libraryAssignFilterOptions").find("form").serializeObject());
                        }
                    },
                    "columns": [
                        {"data": "mediaId"},
                        {"data": "name"},
                        {"data": "mediaType"},
                        {
                            "sortable": false,
                            "data": function (data, type, row, meta) {
                                if (type != "display")
                                    return "";

                                // Create a click-able span
                                return "<a href=\"#\" class=\"assignItem\"><span class=\"glyphicon glyphicon-plus-sign\"></a>";
                            }
                        }
                    ]
                });

                mediaTable.on('draw', function (e, settings) {
                    dataTableDraw(e, settings);

                    // Clicky on the +spans
                    $(".assignItem", "#mediaAssignments").click(function () {
                        // Get the row that this is in.
                        var data = mediaTable.row($(this).closest("tr")).data();

                        // Construct a new list item for the lower list and append it.
                        var newItem = $("<li/>", {
                            "text": " " + data.name,
                            "data-media-id": data.mediaId,
                            "class": "li-sortable",
                            "dblclick": function () {
                                $(this).remove();
                            }
                        });

                        newItem.appendTo("#LibraryAssignSortable");

                        // Add a span to that new item
                        $("<span/>", {
                            "class": "glyphicon glyphicon-minus-sign",
                            click: function () {
                                $(this).parent().remove();
                            }
                        }).prependTo(newItem);
                    });
                });
                mediaTable.on('processing.dt', dataTableProcessing);

                // Make our little list sortable
                $("#LibraryAssignSortable").sortable();

                // Bind the filter form
                $("#libraryAssignFilterOptions").find("input, select").change(function () {
                    mediaTable.ajax.reload();
                });
            }

            /**
             * Open Upload Form
             */
            function openUploadForm(templateOptions, buttons) {

                // Close the current dialog
                XiboDialogClose();

                var template = Handlebars.compile($("#template-file-upload").html());

                // Handle bars and open a dialog
                bootbox.dialog({
                    message: template(templateOptions),
                    title: "{% trans "Upload media" %}",
                    buttons: buttons,
                    updateInAllChecked: {% if settings.LIBRARY_MEDIA_UPDATEINALL_CHECKB == "Checked" %}true{% else %}false{% endif %},
                    deleteOldRevisionsChecked: {% if settings.LIBRARY_MEDIA_DELETEOLDVER_CHECKB == "Checked" %}true{% else %}false{% endif %}
                }).on('shown.bs.modal', function () {
                    // Configure the upload form
                    var url = "{{ urlFor("library.add") }}";
                    var form = $(this).find("form");

                    // Initialize the jQuery File Upload widget:
                    form.fileupload({
                        url: url,
                        disableImageResize: false
                    });

                    // Upload server status check for browsers with CORS support:
                    if ($.support.cors) {
                        $.ajax({
                            url: url,
                            type: 'HEAD'
                        }).fail(function () {
                            $('<span class="alert alert-error"/>')
                                    .text('Upload server currently unavailable - ' + new Date())
                                    .appendTo(form);
                        });
                    }

                    // Enable iframe cross-domain access via redirect option:
                    form.fileupload(
                            'option',
                            'redirect',
                            window.location.href.replace(
                                    /\/[^\/]*$/,
                                    '/cors/result.html?%s'
                            )
                    );

                    form.bind('fileuploadsubmit', function (e, data) {
                        var inputs = data.context.find(':input');
                        if (inputs.filter('[required][value=""]').first().focus().length) {
                            return false;
                        }
                        data.formData = inputs.serializeArray().concat(form.serializeArray());

                        inputs.filter("input").prop("disabled", true);
                    });
                });
            }

            // Click Handler for Library Upload Buttons (image, video, powerpoint, flash)
            function libraryUploadClick(e) {
                e.preventDefault();

                var validExt = $(this).data().validExt.replace(/,/g, "|");
                var playlistId = $(this).data().playlistId;

                openUploadForm({
                    trans: {
                        addFiles: "{% trans "Add files" %}",
                        startUpload: "{% trans "Start upload" %}",
                        cancelUpload: "{% trans "Cancel upload" %}"
                    },
                    upload: {
                        maxSize: {{ libraryUpload.maxSize }},
                        maxSizeMessage: "{{ libraryUpload.maxSizeMessage }}",
                        validExt: validExt
                    },
                    playlistId: playlistId
                }, {
                    library: {
                        label: "{% trans "View Library" %}",
                        callback: function () {
                            XiboFormRender("{{ urlFor("playlist.library.assign.form") }}".replace(":id", playlistId));
                        }
                    },
                    main: {
                        label: "{% trans "Done" %}",
                        className: "btn-primary",
                        callback: function () {
                            XiboFormRender(timelineForm.url, timelineForm.value);
                        }
                    }
                });
            }

            /**
             * Media Edit form
             */
            function mediaEditFormOpen(dialog) {

                if (dialog.find("form").data().mediaEditable != 1)
                    return;

                // Create a new button
                var footer = dialog.find(".modal-footer");
                var mediaId = dialog.find("form").data().mediaId;
                var widgetId = dialog.find("form").data().widgetId;
                var validExtensions = dialog.find("form").data().validExtensions;

                // Append
                var replaceButton = $('<button class="btn btn-warning">').html("{% trans "Replace" %}");
                replaceButton.click(function (e) {
                    e.preventDefault();

                    // Open the upload dialog with our options.
                    openUploadForm({
                        oldMediaId: mediaId,
                        widgetId: widgetId,
                        {% if config.LIBRARY_MEDIA_UPDATEINALL_CHECKB == "Checked" %}
                        updateInAllChecked: true,
                        {% else %}
                        updateInAllChecked: false,
                        {% endif %}
                        trans: {
                            addFiles: "{% trans "Add Replacement" %}",
                            startUpload: "{% trans "Start Replace" %}",
                            cancelUpload: "{% trans "Cancel Replace" %}",
                            updateInLayouts: {
                                title: "{% trans "Update this media in all layouts it is assigned to?" %}",
                                helpText: "{% trans "Note: It will only be updated in layouts you have permission to edit." %}"
                            },
                            deleteOldRevisions: {
                                title: "{% trans "Delete the old version?" %}",
                                helpText: "{% trans "Completely remove the old version of this media item if a new file is being uploaded." %}"
                            }
                        },
                        upload: {
                            maxSize: {{ libraryUpload.maxSize }},
                            maxSizeMessage: "{{ libraryUpload.maxSizeMessage }}",
                            validExt: validExtensions
                        }
                    }, {
                        main: {
                            label: "{% trans "Done" %}",
                            className: "btn-primary",
                            callback: function () {
                                XiboFormRender(timelineForm.url, timelineForm.value);
                            }
                        }
                    });
                });

                footer.find(".btn-primary").before(replaceButton);
            }

            function timelineGridCallback(dialog) {

                dialog.addClass("modal-big");

                var timelineWidgetTabel = $("#timelineWidgets").DataTable({
                    "language": dataTablesLanguage,
                    serverSide: true, 
                    stateSave: true,
                    filter: false,
                    'ordering': false,
                    searchDelay: 3000,
                    //"order": [[0, "asc"]],
                    //rowReorder: true,
                    "createdRow": function( row, data, dataIndex ) {
                        //console.log($(row));
                        //console.log(data);
                        $(row).attr('widgetid', data['widgetId']);
                        $(row).attr('displayorder', data['displayOrder']);
                        //$(row).append('<td id="playlistdatacell" style="display:none;" widgetid="' + data['widgetId'] + '">' + data['widgetId'] + '</td>');
                    },                    
                    ajax: {
                        url: "{{ urlFor("playlist.widget.search") }}",
                        "data": function (d) {
                            $.extend(d, $("#timelineWidgets").closest(".XiboGrid").find(".FilterDiv form").serializeObject());
                        }
                    },
                    "columns": [
                        {"data": "displayOrder", "orderable": false},
                        {"data": "name", "orderable": false},
                        {"data": "type", "orderable": false},
                        {"data": "duration", "orderable": false},
                        {"data": "transition", "orderable": false},
                        {"data": "widgetId", "visible": false, "orderable": false},
                        {
                            "orderable": false,
                            "data": dataTableButtonsColumn
                        }
                    ]
                });
                $("#timelineWidgets tbody").sortable();
                timelineWidgetTabel.on('draw', dataTableDraw);
                timelineWidgetTabel.on('processing.dt', dataTableProcessing);
                // Hook up the library Upload Buttons
                $(".libraryUploadForm").click(libraryUploadClick);
            }

            function DeleteRegion(form, regionId) {
                $.ajax({
                    type: form.attr("method"),
                    url: form.attr("action"),
                    cache: false,
                    dataType: "json",
                    data: form.serialize(),
                    success: function (xhr, textStatus, error) {

                        XiboSubmitResponse(xhr, form);

                        if (xhr.success)
                            $("#region_" + regionId).remove();
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        SystemMessage(xhr.responseText, false);
                    }
                });
            }
            // this function will be called after playlist been edited (from grid or timeline)
            refreshplaylistCallback = function ()
            {};
            // this will be called from playlist-page
            function playlistAddFormOpen() {
                $("#playlistAddForm").submit(function(e) {
                    e.preventDefault();
                    var form = $(this);

                    //var url = $(this).data().redirect;
                    var urlFormRedirect = $(this).data().formRedirect;
                    $.ajax({
                        type: $(this).attr("method"),
                        url: $(this).attr("action"),
                        data: $(this).serialize(),
                        cache: false,
                        dataType:"json",
                        success: function(xhr, textStatus, error) {

                            XiboSubmitResponse(xhr, form);

                            if (xhr.success && urlFormRedirect != null) 
                            {
                                // Reload the designer
                                XiboFormRender(urlFormRedirect.replace(":id", xhr.id));
                            }
                        }
                    });
                });
            }
            $("[name='my-checkbox']").bootstrapSwitch();
        </script>


        {% for module in modules %}
            {% if module.layoutDesignerJavaScript() != "" %}
                {% include module.layoutDesignerJavaScript() ~ ".twig" %}
            {% endif %}
        {% endfor %}
{% endblock %}